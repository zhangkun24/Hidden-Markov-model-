(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    185649,       3887]
NotebookOptionsPosition[    180781,       3728]
NotebookOutlinePosition[    181231,       3748]
CellTagsIndexPosition[    181188,       3745]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["HMM decoding assignment", "Title",
 CellChangeTimes->{{3.5855109621349773`*^9, 3.5855109786207867`*^9}, {
  3.589537452880289*^9, 3.58953745716191*^9}, {3.589538129491316*^9, 
  3.5895381327143*^9}, {3.5895844392069798`*^9, 3.589584452050078*^9}, {
  3.5918315076284404`*^9, 3.59183151468344*^9}, {3.5919578506188755`*^9, 
  3.59195786464877*^9}}],

Cell[TextData[{
 StyleBox["Plasmodium falsciparum",
  FontSlant->"Italic"],
 ", the parasite that causes malaria, has a genome that is unusually rich in \
A and T bases, and correspondinly poor in Gs and Cs. For this assignment, we \
will give you a file containing a single DNA sequence that we created by \
interleaving segments of the human and Plasmodium genomes. You will use an \
HMM to figure where each of these segments begins and ends and which genome \
each segment was taken from. This is an examlpe of the HMM decoding problem.\n\
\nHere\[CloseCurlyQuote]s a toy example. Given:"
}], "Text",
 CellChangeTimes->{{3.585512475580336*^9, 3.5855125543489027`*^9}, {
   3.589537492811056*^9, 3.589537550642374*^9}, 3.5918316120454407`*^9, {
   3.5918316607314405`*^9, 3.5918317695314407`*^9}, {3.5918318093474407`*^9, 
   3.5918319728354406`*^9}, {3.59183200986244*^9, 3.5918320236274405`*^9}, {
   3.5918320547384405`*^9, 3.5918320909164405`*^9}, {3.5918321451554403`*^9, 
   3.5918322628664403`*^9}, {3.59183236532244*^9, 3.5918324109464407`*^9}, {
   3.59183246636244*^9, 3.5918325030264406`*^9}, {3.5918332165074406`*^9, 
   3.59183324513144*^9}, 3.59183332569744*^9, 3.59183336587444*^9, {
   3.5918333989954405`*^9, 3.59183354149944*^9}, {3.5918337669314404`*^9, 
   3.5918338033474407`*^9}, {3.5918425460434403`*^9, 3.59184256486744*^9}, {
   3.5918426319234405`*^9, 3.5918426330514402`*^9}, {3.653231206612688*^9, 
   3.653231422192459*^9}}],

Cell[CellGroupData[{

Cell["A sequence of observations", "Item",
 CellChangeTimes->{{3.5918325172664404`*^9, 3.59183252146144*^9}}],

Cell["E.g., ACGTGACGGCGA", "Subitem",
 CellChangeTimes->{{3.5918325172664404`*^9, 3.5918325277504406`*^9}, 
   3.5918333101394405`*^9}],

Cell["\<\
An HMM where the observations are the bases in the merged sequence, and the \
states are human (H) and malaria (M).\
\>", "Item",
 CellChangeTimes->{{3.5918325172664404`*^9, 3.5918325457414403`*^9}, {
   3.59183337076344*^9, 3.5918333787074404`*^9}, {3.5918345486674404`*^9, 
   3.5918345519314404`*^9}, 3.5918828590056953`*^9}],

Cell["E.g., ", "Subitem",
 CellChangeTimes->{{3.5918325172664404`*^9, 3.59183254749944*^9}, {
  3.5918333671274405`*^9, 3.5918333855624404`*^9}}]
}, Open  ]],

Cell[BoxData[{
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsnQeYZFW1/fup74kZwzMiooIgZkRBkoNkEAUBwUCQnBlyxkGCIGEAyTnn
IEFAEIY85CxRmEEkRwkC+vzf//wO7GLX7nOrqrur+1ZY+/vWdE/1rVu37j1h
nb3X3ufzq2/yk7XfMTAwsPl00/75ya+2XnCzzX617XLTT/vPChtvvt46G6+1
5hIbb7HWOmttNvfq75z24n/+a2Dge9OOf9e033feeWdBEARBEARBEARBEARB
EARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEARBEISOw9Z7LPzJ8Xt8
/5hN9/x+IQi9gE32/P4pm+8x7ptV9y1BEAShWmy2x/fPqXpOEoS2Y48Fbqu6
bwmCIAjVovK5SBBGCVX3LUEQBKFaVD0PCcJooeq+JQiCIFSLOC8ccenPBKEr
IY4jCIIgeIjjCL0CcRxBEATBQxxH6BWI4wiCIAge4jhCr0AcRxAEQfAQxxF6
BeI4giAIgoc4jtArEMcRBEEQPMRxhF6BOI4gCILgIY4j9ArEcQRBEAQPcRyh
VyCOIwiCIHiI4wi9AnEcQRAEwUMcR+gViOMIgiAIHuI4Qq9AHEcQBEHwEMfp
XJx6zcbF5PuPL2556MzijOs2r/x6Oh3iOIIgCIJHt3KcR5+9vSizx5//S8I9
j15aXHL7PpVf63Dx7EtTa99p6tM3VX49nQ5xHEEQBMGjGznOuTfuWMpvyjhP
N/pBXnjlsdp3gO9UfT2dDnEcQRAEwaMbOc4FN+9Sx2GI5Rjwd8BposEXjr5s
lcqvfSi48cFTatdPzKrq6+l0iOMIgiAIHr3AcXLHwGfgPN6IXVV97cLoQRxH
EARB8OhVjmO4/7Er63w5VV+7MHoQxxEEQRA8ep3joDn21m3xKqF1iOMIgiAI
Hr3OceKxJ165XtPzHzdpjeKae48q7nrkwqTteePfr6afxL4uv/OAlq8TPoWO
5q9PXlfL9bJ8L68hMsRr49rRFwF01rnPuOjWPVKOGf4q/364HdeP7+qpFx9M
n8l3qvrZjSbEcQRBEASPXuc43o/zf//5V9Nzn339NnX5TDmDUzTjSlzjS/98
uuF5ol35l0PqzuHjbHCg3Of4Y/hM8sfgNGUGX4LDVf0MxXEEQRCE0Uavcxzm
dLNmmmN8NPAgM/N/wC/gNfhzzP75xgulPAee4c8DZ7p9yrnpPDHni7+Zfyf6
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
o48W5557bnHAAQcURx55ZPGXv/xl0PXzfuNiZXb//fcXf/jDH1JOm/GbMh/P
aFv06aHVkclkMpmsmyxqjKeffvqO1WB4nhPjOOZLgYeY8Tt848wzzyw222yz
Yv755y/mmmuuYp111ilOO+204q677kpcznw70Tfj+RM/4/mnTJlSXHLJJcXv
fve74sc//nHx5S9/ufjqV79abL755sW1115bPPDAA4O4Iud/9tlnE5+58847
i1tuuaW44YYbissvv7zYddddi1/+8peJJ+HPqdrWXXfdOm0Ovj6ZTCaTybrF
uk1jbHzDx6iwXGzn5ptvLn72s58Vs8wyS/G///u/xQc/+MHiQx/6UPHRj340
vbb88ssXp59+euIcdg7jNPxufiHz7/iYFfxm6623LmafffZihhlmSH6wGWec
sXjf+95XfPzjHy/mm2++Yr311isuvPDCOl7E+fHVrL766sXSSy9dLLjggsWc
c85ZfO1rXys+85nPFJ/+9KeTDgp+NNZanGjwX2rlqIaATCaTybrNYjzi17/+
ddWXlLWo0/X8I6fd5e/EozbccMPive99b/pu8I6VV145cTp8Obz2P//zP8WP
fvSj4vbbb699lvEYiy3l4kUPPvhg8rl87nOfS+d5xzvekfw4vLbWWmsVn//8
59Pr8Kodd9yxxqEw+M6WW25Zd989ONcaa6xR3HTTTZXFqbzB5fDtdapOSyaT
yWSyaJ2uMfZmnCPGkXL6Fo5BH7P99tsXn/jEJ9J3w7fyq1/9KnGZ5557rjjs
sMNSTIm/4dvZfffdi8cee6zGKTincRvjU/Y5cJQTTjgh+W/s3s0xxxzFcccd
V7z00kvJ/4L/xv622GKLJd/YP/7xj9r7+bwvfelLxcwzz5yu8b/+679qx7//
/e9P74fj4JcaSp7YaBnX3w1cWCaTyWSybtAYezPOYZzGa4GjPf/880lbvOii
i9a+37e//e3iiCOOKF555ZV0zJVXXlksssgitb9/8YtfTP6Wp556qnYe8xMB
y5Xi8+AwxKjgTaZf+sUvflFcffXVtWPgMMYf+fsPf/jD4uKLL65dN+e47LLL
0mtog+A1di0f+9jHEj+75557Ei+qIq8qZ8TPPM+ZNGlS1Zckk8lkMlmddZPG
2Mz4jGmCG/k20PCuueaaSdvC9/vv//7vYrnllisuvfTSmi4GnQ6xJT9no58h
vuXzmYxX2ftefvnl4uijjy7mmWee4p3vfGdNo/Kb3/wm8RazffbZp463fOAD
H0jHoCOOvOyggw5KGiE7Fq3QhAkTir/+9a+Jk3VCvMrMt5tPfvKTiSvLZDKZ
TNYp1m0aY2+t5F+j5yUOZfGf97znPam+C7E5fDIYeeSR4+DrIa+cedvXz/H2
5JNPJr8LvMnOP+ussxa///3v6+b7fffdt6YDAu9+97uLVVZZJeVaUfvG2377
7Zeu0XPOTtEcR+M7wm3sWuE8MplMJpN1gh1yyCFdrauAo8A/Gvk2TjnllJoO
B7zrXe8q1l577eKOO+4o/vnPf6Zj0NGiNfb3An0MvhZyzf35PZ9Cs/OTn/yk
dl54DpqaPffcs5g6dWrtOOrkeK0THAY/EfEyYmn+vPh8OJcdizZ6u+22S7nl
naDFiUaMyt837d0pk8lksqqtmzTGZUbMiFhbI45zxhlnpPxrPw+Tp+05Dppk
NDL+GHKg8PeYrgaz/HTzp+DHIO5lMTA4DjlUu+yyS4otmR144IGDYlXUztl5
551rmh/jL3vttVct7uU5zn333dcxWpxov/3tb7vWFyiTyWSy3rIYY+jWPYiY
832OExZrGjPffvazn62bg9EE+1zshx56qFhiiSXqjoGTLLXUUkkHbOeFE8Gr
jGsQq1phhRXS8RarQq+89957F3/7299q10Ds6sMf/nDduYlpoWuOGhZ8QN6P
gzZniy22SJpjX1en0wyO7ONr+MZkMplMJhtLi3XcunE+8ppj78PhNdtfwYw9
FajJ5/kLe2mjJzYuBH/weVfma8G3Q80++0w7t/fjGMcxUEuQfQ7wDZnhx+F8
Xo/DcTvttFNd7ha2xx57JJ+Q5zjEf6jBbNzK78EVawXZa6ZVGisND3l4PjeP
NtaNvFlWv2dJo/hobk/csvNY3YVcO43tuWxf3Ii4V12Ve53IZLLOMF+PH1x0
0UVVX9KQLbcfJ+b3kDJj3wbiPV6Ps+qqqyaOY3MwcaDoxyFnG39PzIn2n+dj
VQb8M3CcRx55pHYcHAdeY8cQizK9D74gb3AcH6uCg7IXBDzMxu/I63Icx3xc
Y6lTjvFP2pqsO8xzhljzMrcHbY6z+PP4WuCNOE7kJZ73xLYb+Y0dZ3+jvYvj
yGT9a1FjjI6iW63ZOs8sao6pY0PtYeZj6v9hxJVMO2wg13yTTTZJuedlhg9m
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
8N2ph0+8mHXKuuuum2pQwUvQ3JEjQA4Ven3iyxa7GgoHAuh+yAFAp231S7yV
rSve+Ne/U80Y9YPG/QCfzlPP/WPM/M7W10wbU8a9zc+J8Wxtr5NG6+mycTvy
H3utzC9rf491mvxn+fobQ80xiTVj7ZyWlxvrYsZr8msuq58ua4/5ed2er2+j
fj3o21A8R5mV+dvL1mg57l/W1nLnapWrd6rv0Pq18Tn2tCyrNY8m8Yc7/LHy
8XasQc4tdUxy92SZ8YcWd9w7tZavZDEb3yb4afF526cPoy4fdQds/xHqHaBn
t9rYZrk+0E1W5m/3f0eDT60zalgR7yVngHxG8qSoTUVtHeLHxJ+Ic9m+da0C
TR15XIcddlitbhVGm8dXZrVMzEf20iuvle49on4w+J4su+lhxf1Tnhz1tuRz
qH3+UsxRijXsMV5Dh251XX37s5+5OGyu9oxZo3ZdZvBsdBGnnXZa8mmeeeaZ
SeeJnoIxAf7vNRFDsZivYv4dz9uif8vvGyxrr8U9fc3s3ke+7NtcWT5eo/0g
PWfO6RiMd1kdthy3jn75RrUJor+zU83yFu+f8ngaq3Jr1oXHn1T5GFs10lp2
1X0G3Z+F196v+PN1d9XGCR/v8bU1GNvsGOZZaiyhT0c/zz446FTQjvjzRG1W
jsN3unGNfu+D+DeL2TYyYr7MAWjbyDdj7x7iXPPOO2/SLwHyKcmxhyviF/O1
Ak3jw9/hkWj/me/4bPxldo+5Rmr5qR8MvR+gxSa+PZpmtVI9p/FrYxvDrZ3R
76g//Pjjj6fXeeb0w5xfxtqjf30oflPOTz1A8gbh67RX2tmkSZNSPSjqsFEL
Ai0oWlLis9R5Iy5N/6fOLb5M9ocjX/iYY45JtdXIsSQPAeDf5VzoLdBd8FmW
P+zN+3a8f9n+lpv7umEs6TbzHDj6XGLb8+05xlb9Mc1yrhv5D+0cluPUiC9Z
24/xT5vPOr1esTeu/aa7p2bzRagtv+S251Y+rnYKqN1WlmN7xiU3191Xa4+W
r21tifwo5lm4DbGYjTbaKI1XxG58PiC/M/9avNT4gHHvbskT9RynTLvQivHd
maOoG4R+n/GdGsqsfQFzCnXwyR2nHij7RVhdKgO8B58OeQdo7aKeWv1g5P3g
7MtuG41mlMyel4/zlOk1eR0uwN6z1Fy1vXVsvPZ7Wtp7crzHm435vk9yPjgU
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
jPbywx/+MPF7v+8OPlK4Eb4i9Gnw/rj3cdWWq9sq3UH7wBwZ7+83lx5fzPKl
WVNs3/YM97nUfo3nx77cmOlf6/R8PbvWuK9WRDy+UXzKvx7rpDfaG904kN3r
3xz2R/WDMe4H1FRkjdUuwxfDepb1sK8RgG7B9jrL6RfQqhDPYc3M/3kved3o
FDgX8S706Dmz9sw6xeom+zYa68bbe7yPJual+OOa9Wmfq5nbC6jM4GnU+kYn
zXcmFkJOF5oe2egZPjJqHOGvgUMTj8K3xu/EpfC1oUfH7wKIBzWrFdZOs1o3
xFxN307bJ48LfyDtY4899kg6ZvQ9XD8xNPsOfC/qOFHLAx+S6RxHMie18t6y
te6pF980aNwZt/6RlY+HvYaFNh5cJ3rZdXdN8X6Le/sYVFneXa4OgX/G3m/f
qeZ1w7m4tB/v/To2pwmNe33aHhlRQ1nGcWxeOPnCG9QPKuoHrLGG2n5yRpyJ
mnrUOUJTEDWYtk+r39vVOA8cCP0B3AZdArmOaIbRWDLG44uPsRvzSRp/8Zza
rz9yHKcVbZjvD43is74+j7+WZufmOold8F3RdzBf4fNijkUX7ceX3NpD1tzi
fZoyZUrStPj8PjS/cEv0vcSiWPMO14fWzA/eLsPfR34Xmmhy9tCW4vf08TW0
a3Bo6iKQB3bPPfeUXlMc9735XBU7NtdPfK0H+/sDU58apK1krz3lxY4OFljn
0EHj+yWT76k9I/M1m7857j1jxzVa13W6H8dbI9+7/71sjM/pjGNeSKNYlt3z
e/76mPpBB/SDHB+Iz872GYhzABwE3zo6ActTzO3RarEqdDhx31Z4zgorrJD8
7YzHce0c21CZfyby6bI2WNYuc+200XFxDrD35K4jF4OC5xC7guug0aH24LLL
LluX42k6ZPssq9HleV6jvtaL5rVXZXOzGdzmvPPOK7bffvsUk6INwm3gk8Sr
Yi5/txn+HnTSaJ3R4cPhiIFazSZ8hNRFoZ0REyZHC81bK2txv673awpvfn3r
x/9Vdji2bpwh/+GHO15Y+RjYq6BmHHtSR03Csy++UhuTIhcty6mQtc/UDzqj
Hzzzwst1+3vE+KX5K2LOD2tK9JoWZ/K54fbT/44fhznG/Dk+jxYNJbVvzHI8
uhcsx4vQF2233XYp7mC1LKgfZ1zPfEX8tD07o+atX8Yr85n72GCZ34z5n5xs
5nl0vGh3f/CDHyTtMG3X8xufD9FtRkyK+BScmXYD50Hbht4NjRFrDzT73Afi
WeiMWEvYnEecuWwtCiyXoCzfL66Fjz1v8qC1FLrAqse/Xgf7NsYckx0POj89
G1+v2PshZKNnx51/vfpBB/UDmzNjTb+kCX9L7+LnEv7PXk/kPhlfsXhUTncD
x7E4FTzHdDqWY8X4y/ksH7aVHKluM5ufczpm8s3RWsw888wpbkX+MnWc7Tjz
M9v8bnHxZvG0XjKv8fY+LO4JfMXHNNEKE8chR5s2BsdB90U+U8y55v1WD60b
fPF2D8quEx5MjR9yaqjvQy1/NDzWF4mPoqsmZ4z64MS9/N7I0Wz94+dGr1v1
1zH18ecG+ebZO7jqca9fwB6OcV697vaH0nht/SPna5a119QPOrMf+JwjP57F
1/A7ULfma1/7Wl1+K/5xq8vgOY3xGrgMP+13Xy8HkENivhyfd9cr5v3FuTqZ
aJBYY5MnbLUt0MCaGe+zNZnXzXX6vNwOs+8btYHcC2KmcHHAfI3OhnuIDwPf
DflHaL2N3xh393kRna438M871mf212z6UjN0beRrUWcHjT+xOtYUlveIHxY+
SL1B/DvknuXM82mvP/XxQnIZ6nzzq03U3jtjjLh3Ib76l195ta7OR7+MGVWZ
+kH1yPUD8qx8zaecfwB9A/VYLa5iWhs4DjCNsecw/N32u8R3bjodO97OQy01
fBlWF7DXOI7NDRZ7yulJyJ/h/hJb4B7he0BD4edm40i5HLFetxiT8jHUVCf9
iiuSNsW079RZYh8NcqT8Xggx5tUNmib7jnAYz4/92qTMp4efizwbfIPovajN
xL5rlgPJ/ULHgx4M7Y6vxW3m1zo5vnnlzQ8MWjstvtVZlY91/Yacr574oa+P
p/oUo2fqB52Bsn5gazW/j7gZ+xbsvvvuaQ0Y41DmnzFtsXEefvd/9znk8B7P
cfg7+z5QR8ask+ecoZpfh9tcZDlh/j7Dc6gLRy0U5iDy1dBZmMWYuuXPxz2+
et3Mx2j3gnvEvTL/DXuqxpwi+JDFtez+d0uNM+M4Pn8Vszbg99Np5t/j73Cd
XXbZJWneqT+IfsfqOfAatQ+p2ePbpq/1730C/B71lePWPbzyca5fEX31xE3Q
XTarayobuakfdA7K+kHMA+InYx36TV8H1tf0M02x/YS/4LPx+37nQN40ex2Q
68q+3vjMqWVma9Ne2tcg5ycoq7GAhpR6iNwjYlfU08Vi3SnTg3fqPozttEa+
FvQ31M1jDwRq3RCrintlcH/gN8RubN8Pzwc62Q8W41RmuTplfh5r5JviWHTZ
HI+fC90/bQ3ArckFYD8S6inTHn29XPtsi71efsO9g2uNbnd+5WNc32LCpSk+
4p/HxBMuG7TGkrXXcj4c9YPO6gf7Hv/nOn8A49f1119fbLjhhrXaw8ZvzA9j
2psyvbGB+Qe9I7pa8niJd/3oRz9KNYypTcI4i4/c9vi0PeN6zWweapT7Tg06
1tjsicR9p9YzumTjM/Z+28u2H9Zm5vOK35U6eeSGUwsPTdhOO+2U7pWZ+bgs
Dmvty+J+Md+kEy2nFfL+Vl/zIdY583WjGq0dqM2EJueEE04oFlxwwVpNTvQ7
xLXY4zaafd7K2x+jGmcdBuroxjXs08+/VIvRdjqv70Yb5MNRP6gcuX4w9e9v
1xWePHly8q8wf5TVvvEa4zJ+Q9wFfzh1WNHR/ulPf0r7PuAvJwbmeRXjMvN2
jOH0ijHnouv039nrKdDe4Gdg3yP2GsAfRnyQPBmbj/0ewX5vil62XI1WagCz
d+vss8+eYqNwZuZqzNc8yNV24v88C9Nvd7Iex/tV7Tq9HivXT7yfxXOg+FrO
6Jtrr712sdxyy6XcSfrwQgstVOy5556pXqLnkIPWrqvsXSy908WVj219jxJf
Tq6ekWzkpn7Qocj0g/1OvDzNs+g3GefwWXtu08xXQ54qcw3aCPb9WWuttYqd
d945rQPL9pv0fgwbg3up/9ma2nwvcBg/V/v92/mb3Qs0ouxVhN+M/CD0s3Zv
bC1mv/eDHse0J2b4HYjpcX+o90tuOLnTmOWD+7rs/jwxrtMte4VFn06sJeXr
Wnn+6305uf0DvXEP4eGmgcfnik+RHHzWO/gVb7/99pQLuNle9XvFLLTRcdWP
a0JCXMOSW/LKq/+s8+3J2mNb73eO+kGHIvaDJdb/ffGHc89LewKil8lxGbgO
dXnhP+gfGPtY75HvfPDBByf9DnEn23cHHUSuX/m52r/WyWvq4ZifT32d5ri+
Zm7Bt+D1FewD9o1vfCPpaOGKlndmvMbms26Yn9th/nuyP4PV9CU3mrbmeWMj
XYrdf3se3aA79twlxjo9t4m64MhzjNPFvWSt5r83eAzckXoRCy+8cK3eEPGs
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
3jN1crz+RnUORtfi2N7p9V2bcRy4i9+n07THx//5r7XXyva16naOozrHw7du
6wcR4jhvP7t1djmpzudvmgetkUfPmKfxm+22224pjwqsu+66xfPPPz/oOMsl
6pe4DPfgoIMOKj784Q8XH/nIR4qNNtqo+Nvf3t4rkfugWoCjZ+zj6MeHhcef
VPmY1QjNOA7w9W9uefDZ9JrPuSqrEdhtHAdfg3921LGTDc+6rR9E9DPHif1g
uQ33Km6//fb4iDV/jKIRg8I/wd6T7E+15JJLJh1OzBeyfP5+8ePYd/zLX/6S
ON8MM8xQfOELXyj233//4u9/f3OeslhV2f3I7eneDTac6/ba9fjacNvMJZPv
qRsfxq1/ZOVjViO0wnHYm8GbzxfPaY0N3cZxFtn05LpnNxb7jufWGq34WP3Y
ljs2d97c/1t5bTjWbf0gop85TuwHX1/wZ0nnecQRRxRnnXVW2v/a15f1bcfa
ZHwt5mXl9Dxl+0U32ke66nm9bN/Csms1vYjdF+u7NueYPfvss8UWW2yRcsU/
8YlPpDkc/4XdX8ulsnhV1fdhLMzuGcb3ps7zaqutlrTHX/va1+ryyImrek2T
/93uX2yXna4xM+42FH9drhai+f2a5ddb+4Jv09/xK6Jxuu7W++rGh/nXOrjy
MasRWuE4wOeIe8tpjQ3dxnEW3PCYumd39mW3tdyWhmuel/uclWbtj+Msd8Da
sO/HsW37MdVei+Oqt5H29bsefKyr+kFEP3Oc2A++Ms8Pi49//ONpP0jWzT/5
yU+Ks88+O9Vji/Mrbc6voXNxrUZzTHzd2m1ubO8E7bOv/Rz7cW7twnxBv7V+
DnzdOjvu6quvTjlU73jHO4rvfve7xZ/+9KfauZlrgN3bftEc5zg0mmPLsdpx
xx1r4yb32Noiv/vcszgWWvvqVI2Z52V+TLfxu9F1+74W22cje+6554rrrrsu
7ZG27bbbJp/Z+uuvX2yyySbFehtsXDc+zLPqPpWPWY3QKsfxvhuzMq2xods4
DvOwf3bM06Nt1n5trLL5oBlX9/kD9rtv6zl/Lb/T1218HM254eVXX++qfhDR
zxwn9oNd9jqo2HLLLYtFF120ePe7353mE+Zf6szuvvvuxfXXX59tA3Fs9rnn
uXE5Hm/jsvEBm7e8H8Sf19amY8l5/Lwb/Vdm/nvzHXztYvo8vMevac4999y0
rzj3mXyq3/72t8Wjjz6a/sZ9II/IeFK/+XH8mpD7wP4Ws846a+KC7PFgmmx/
b7jH1nZyvNPaTadzHN/u7XqNx/l+0Iqfh+NZo1Bn6ZZbbkn7gE2aNCnhj3/8
Y3HwwQcXa621VuLXaLuNRxq+vfyOdWMEe9xVPW6VoVWOE/fpxMq0xoZu4zjM
w/65PfviK+1rqA3Mxj6/xjO78847i/POO68455xz0lqONsic8vTTT9e9P+7T
4sddv0bM2ZNPPlncdNNNKf6P7gI/eTv0i0tteFDX9IOIfuY4uX6Ar5q6+azj
2BPx29/+dqrBNt100xU///nPi+OPPz6Nk9RyYU6J5jl3WWzH8x+/ZrU6MHBz
m6tsDet5kNVGGat5KsZC/F6Qkav593gfgvkZMGJR3MOFF144zSNf+cpXir33
3rt44IEHavOb3QMfs+oXLQ7m2w3fG63xHnvskTQ5xPS23nrr4q9/fTsfxj+T
eK+iLy3y1E4y32doA7YPq9ecW7/IxQE89+f9zCvHHnts2hNk8cUXT7G+L3/5
y6nNffWrXy0+//nPJ003/Rv+GDnObAutUTdGLLbFGZWPW2VoleMAXw8Ha7Yf
eTdxHGrU+We2yDr7j2KLrbe4FrR9+Bjb1ltvvbTHLmC98q1vfatYY401Ete2
uhB+3KQt04at/fN/5ieO9eOi9XvGiNNOOy3NU3POOWeqIXrhhRfWzj0SG7/X
GV3TDyL6leM06gdwFzjMXXfdlXj2iiuumMY7cltmnnnmYo455ijWWWed4s9/
/nOpNrZR2/fzUYyp2nrc7z0ZedJY6kg9p4kxYluvmIYhXpPxGv86te1OOOGE
Yv755085VJ/73OcSb2Qt4zUo9v15zXxC/bLHdvRhmDFfM24xHzM/n3rqqXX3
wu5V5L/+eXnu3Onm6xtGf6YZbY/7cskll6R2RH7eTjvtVPz6178utt9++7Qf
Bm2N+HPkLxHvfOc7094Z73rXu5Ifl7XNTN9eom6cWHCDoyofu8pADjj+GfLD
9//DPU3HfcZ7jH3Jm537zGumpnOTg1W231WnIOost9z3rDHl9L5PMi7iU1l7
7bWLj33sY8UnP/nJYoUVVkhcmzZH/SvqQsDD8bnY+60v+/i8rX95jZrw5GZQ
C37jjTdO8QdirNRQ/dCHPpTOzVxl+saR2hFnX9M1/SAC/m5tHW7f6vvwdz76
zKvpfWX7n3QyYj/YauLZpXMn8Xo0ELSjH/zgB2mOYX5m7KR9/e53v0t+R793
djTGZovR5uYXH3Notrd2u/TyrVj03Xg+5mMkFkfy/MQ4kBn7Th122GEpLkAf
ZB1z+OGHFy+99FLtnKZH8ut2rzHpxjyhoZqNcRZ7MvvHP/6R1mn4Fz/60Y+m
9RrrtMcff7zGhbyPPOZp8IzgBJ28x5Vv277NWduy/7M2pUbkH/7wh+TTWm65
5VJ7et/73lfHWXK+GfL3gH+N4wxwHNsT9n0f/nTdOMH+dlWPXUJjjFv38Lpn
ds5lt45Z/Y+oF0ZvaHuywJs33HDDFDc9+eSTkw7C2uG4ceOKyy+/fFBs3vuE
vG8WPgR/wV8Df3//+99fa8fWplkHUR8dzdlI7YGpT6kfdBliP7jgqrvSszQu
Usb7L7vsssTJiWHhc0SjDBf/8Y9/nPwTt912W2rDtMFcv4o6Sp9vlKs5mIt1
VZFDnYtxxLgVZnoi38+Zd/HVUuuF9Qt9/Ytf/GLKX7PzMe9ynHGlnDapme60
lyzqruw7oy3Zd9990z6dtDv4In4Lcswxa0fGLz3vtrVhJ8epfEwt5z/EeO2+
++5L92GRRRYpZpxxxrR2hdM089XkOA7zAm0SToMfx3Mjfp/nl7vXjRXdtidh
X4Ha9avsXfe8Hn3yuUp8v2gL8SPi/7eYPGMe/RN/Nr5G9uXjb/h3qO1+9913
142Bpi2O+RYcc++996b8X2LYrHsiZ2eOYsxthx8HI9ahftAlyPSDx55+oTav
GMcB+Aa9sQ5mPrnmmmuSdgzdDjwa3w6chznnpz/9afI9Eu8qi4VarNWv08ti
UrF/VuHLyOX6eH+q+Qbid+BvxBGI7eE7ZW5ZYIEFihNPPLG2n3jUF9tc52N2
/N/m7F7nODa++bimv+/ocHbZZZcU52M8o/3Bc+65557avTeubs/Ft6VO9YXZ
eO7bgf30eYxgypQpyQeIL9WP7XAVYDzFuIz5aOz//MRfY3yH/TLow54nEVsg
t3L17Q7t6hpo/QT2UsrVrh/rdsw694ADDig+85nPpLYEd15qqaVSnq6N+ehw
0INZu5177rnTuGh93fQ8vu5+rt/CYYjRWowK0Ja/973vpb1828VxdjzofPWD
LkHsB8uMP7Q2dvrYiM3hUVPiDf/Efvvtl/yRtCnGTfMTEktA60hOFvkbxE/h
Pa36TW1sjzklVVguT9z3wVzu2K233pr8qay1re8RL6af+7nX32PToVjMzj7P
OE8/7D0e+Y2vJ2DPgXa0ww47JL8Ya0B+EpufPHlyHW+293hdeCv5rFWYv874
jPlO8GDv10LDRS6e5UMxj7Auxm8PZ4l8Bph/hp8cz3ExnsX8wNyDHpQY9HlX
3FFfH2TNAysfw4Q8Yj2Q/U68fExj+xh9C67CfGD5ubTLlVZaKe3JZ/2TvVpY
F1u7oz3Sh4nd21xksWcbE2NNBTP8Q8QU7Fz0gbnmmqv4/e9/35ZYFUasQ/2g
OxD7wcQTLqtrn1Hv62MkNq/7OYL/E0MgH3DNNddM7Rb/OeMkP1kPAtocmh64
Dr4g1qLUrMWf0YqWp5GeZzTMa/zNLBaSGzPoj5anS19mjrBYHr4G4nn4dPy9
izlaPj4V4xRem9HL5nOLrNaQ8RLGP5vn8efgqyZfg/sL14FXc4+95sbimtxX
/JCdnIMf9QxmOZ8hdsYZZ6Tv7TXDzCveR+O1Np73cLzpbvzcAA+fOHFiijvz
eeRbLrD6vnVjxpLbdtfey32BjH/+jvsfHbP9eHy7RaPp/SqM//RT1iA2nl5w
wQUpT9Lza/an4xjL4eC64fZWd8PrHf24DJfxn0cfQKvTTo6jftAlyPSDOx94
ew+XnL8i5qWU1WBlPCQXCx0oYy/6nF133TX5KKnja7lZrLm///3vJz09/h/i
DNQ0aGS+ttRY6edsXvGfx+fbPOsNfygcD78VuuxvfvObaf5gXtl0002TNpS6
0Rb78zlm3m9j99brcfzY0aw+RC+ZPXPumd0L7r3XcWO0HWrXwSWZu6mfw/gZ
75PlwHWy5tiP3bmYXeT46HLgddTs9HEmfjd+Y3wnanJMh2PvIyeftTb5anB1
f03b/77e99tNeSX9gkU3O7XuGa241ZG1PjQWY4Zvl2hrzKdv+VPUc2d+MKNW
TuQ46OaJcT3xxBO1PkC/tVp/tt6Omga0xZ6r07bJ/22nHgeL8Sr1g85Drh8Y
p/H1XCJPNm0Oc7wfe5vVZWJOQadMXhY6HXwZxG6IZVGXg/bIT/LTiesQPwVw
JOYutGmdalwb+fPUiKUOL/Vu8NsANHDLLrtsyjvzdVwwu2eRy8T6blbn2M9v
kXP1qnn9rd0vf498++Rv1LcbP358uvdwS2rB0O5Yw5FnigY+pw0bLX/OcM4b
ddb2WlxP2L2B7+EPJV6FDo64U8yTgr/E/CrjPT5uxX1DH8o9I3/NPsfu8c1/
eaRu3GCd9KNfX1L5eCa8jVjT9ZhzrxvT+L6PJxNH9tyFtS35f+iEzVgT+lgV
gKszZhKLtnP6GIL3ZfvvBZeh33uOT9yAPNZGc8hQ/eK33PM39YMOR+wHx543
eVA9Ep/j5GOf5sPxfh0/L5e1FY4jHsW+Q9ShJJZDjGGDDTZIvP1Tn/pUijXM
MsssSaOGX5M6Zb/85S9TzQ/6BXMU8xXtlTGY+cpiV6OpreD7Mpfw2awH+IkO
gnUufir20pxpppmKT3/602kdTL9iDUNdIY7hPTFPLHJJH5ux17wGyWvB+0GP
Y+Y13lF3HP/PPSEng1qKs802Wxrn5plnnuTjsPho5DjmP7NYVhw37bw5v6ZH
PL5Zzcay3MCcrj1n9AE0XayL8bvwPcmlj34a09v4eBW/47vhb3Ys/Q5fI3m+
PsfA1+rGWA/V1dTa9OTKxzPhTSy1Xb1/gZjKY089N8gPXNYWc+27VYtrYv7v
916xdSyvod+0c1988cUpv9THThn72ZuOvozF+glmsZ+g9/R+HNo4+ejkvhhn
L6v/MdQxVf2gc5HrB1bju5kfJ2pTrH3EY3LH5gz/4x133JFiOPhBiJsS16LO
B+2cdspak/mKNTl1o9hTgvwk+gp5s7yPsZ6xGd6U2z90uMZ3gJNRs4G1wIQJ
E1Jth1VXXTXNK+SbsP8C+kxyIrkuNAx8n4cffjh7PvsZx5PcsbE/5ny0srfN
2ho85sADD0z5RuSx2Zi3xBJLpDaGToqYofnCo/k+gDXiobmcP79e8NzJzyM5
jlP2XOHX5ItRe5wYMPt/oOGH19h3Y43AXEG/YZw3jTE8hvbJeJ/TFlNLh5gq
tQLpi9583NSu7dSLb6obP+ZZbWKKfVc9rgmDa4Fsvd85g2pI5rh5ro5Ujtc3
63t+zcH7aFO+rRGrQk9MrMrOS180jmM+R9aKxJ1pj7EP2mfkaowQA6Cte46D
HgKOgx/XX6fvk3H/oVZqkqgfdC5y/aDTjH2I8IOg4aGNzjfffEk7hn/HdAOM
3/jW4T+M9cSE4B/47OEjJ510UnH66acXZ555ZuJA8A7mBnIV8Y8C1hDMGbxm
e6jgW6LG3DHHHJPmw2222SbtJ8U619dWQ1vE/Ml1wXWIrU2dOrXqW9e3xvhk
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
OA553T/84Q9L3cxLL720+tGPflRdfvnl5Xf6tPH6lVde2fp51VVXFV8XOeHj
x4/vs7HuuPnmm0s/CH7efvvtJV/r8ccfL7V4WJv4uM76ColEYqSiLq9KfAGO
cd5555W1pjgOcTXYUWIaeZ+fbORx8BNeRJ459fz0nu+j/frbqMtDHLTHP3sN
H9dsmmqidYvU9xPdIOo4888/f+kjxfhSnL9+Etf/z3/+s7Whweh9YuV802uM
VfZhrFC7iroLXqMKeNxaIpFIjER4HVWvBwjgI+SkLrPMMi2OQwwxdnZKXp/r
NHX9IppqDMa6sE37RXj9nUmtDyV36n3w//35z39ebbPNNsXvyrghpwqdZUoi
1hHvBnX1mOP6YqBnu+4z8RpjLdKBaj/XncOvr0nDkr2LPdwzRzOR6E3U2Qw0
lYsuuqjEC4jj0HMcLbwdaD3p5wLug/LXu0XU6ev6QIPIf9y+Sjvqr5fQYK+j
P06W8RK9B/6njz76aInV/9KXvlTGzde+9rXqpz/9ab+fiXFlqi2luVjjaErF
nkWuID7QxHFi7fH4/Mc1h/eOiXmd1NKqG39Na5c6nuJ+7Do+1sRxciwmEr2H
wXKcvffeu/ihOjm2+5r4XTV4PFd9UtyH7FTkOHE/f8/z0iMn6jTmRza8aU7S
NWRPit4C//dHHnmk5HCrZg0cB/9Vf/Ax6LUzfZtSvicfH5ELNIHrxV+mXlyx
zoNDY0N9L7xmufzTbLHOp4/FJv5VpzdFLqVj5phLJEYGJifHAcpJZ3OOg02s
60He6fVHbtMUc9lkCwfat91rcr5VZ2P709MTwxP8P/FV0XtNvio4Dr3H6+Da
gfQcxgVahp5fxopqkE8JNOkl/prvK+1FfCXmMUSeH2uORv3UeZXXwKrzdblf
uUkbqqsbGu83x2Ai0buY3BwHG6NYSdkX2cVJob036TeD0V+abNukiGd2rcb7
TzRde9rZ4Q+ea2p2k184WI7j87lzHM3X3iNlSiPymzimxHGiXlOnodT5hZyb
1Pmo3EfXpAe5T0pcKfr9vBeMv9+pLzqRSAwfTG6O43EnrsdHe9YpmrjNQLyh
iV9orvHeW+3CbbzfZ4Rs7qTie4mpC/7fxN4QczzrrLMOyHHq5nv5a8ixIu/K
9c8pichTmvhAf1pn1DGjBiOdJ+o00U/WH7+JYzf6s7yHLz/5PjUmo06VXCeR
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
Oc6uu+7a4jjx87Kn2AvsIlo9Nk8ajo6Bv5w5QPu6fZ8UfnHV2dMxsIPEMnz/
+98vPgOuhQ3fPbYYPYbroS6trhduBs8RF9E9qs6+5hbPhXFfFiAXhlgC3Ttz
FWtz1uho/0KTry8xPNEux1E+MyDe5v7776+WX375z2gRM800U4kxIc+KOFsQ
tUSdXz+7na+J80U7gjvoOr7whS+U2BjF/xJLvfDCC7feR9M5+eSTi4YJGCP8
7v5pro17JQaHOkLwN31+ySWXbPly+RzasX8PaK6PPfZYubd//OMfRTcifof4
bjRTvmd4D/HFaLQew6PrEZ/xXHK2mAeWSCR6A4PlOOQ61PmZZC+A7I7bPa1F
2XgdfRobF88beUInUM0wHRcf1XHHHVfNP//8revATuNHg4cA/PPEIrqthQ89
+OCDreN6HpTu22uw6nvg3OSenH322X10LLgO61DinMlhjd/9pLj3xNRHuxzH
///4MPmc8rHw38hnxbOLxrjlllu2fEHw7ViPL9a17JQ38zli18gzUJyM7oV4
NnEW+Mi3vvWtPjxkn332KblQuqa6XltoKtiXyOeIYSZPCmBLiEPy9+EzxAnC
87BR55xzTvEJ8p2NGzeuxAGyDvvtb39bcgjgaQ6vnRxrFMZYoUQi0Rtoh+N4
XpXbUtla/N077rhjscfzzTdfq9arNuwRazO0Hl9z+jE7uX6Pa3QtCL4Br/Br
ILZg3333LfHPALsGD3K9ieu84447yvueA+aaNj9Za2KLpXe/9tprRRsnl4O5
AT7lWju+OsWORh9D6jjDH+1yHAGefd555xX/CvM4ms26667b8qFqW2GFFarf
/e535TMeC+cxOFGn6IQ7c5zrrruuaDji/owPdBY4hvKv4TjkV/k1olWi0aCh
gjr+Tiw+Y1B8TsfHTyedFx7DPnFcohG/+uqrJT8SvQaNCz7IeQ8//PCyoTUR
A02cMvrO+PHjW7zL44Ok+3p/h0Qi0Vtoh+NgV/SZCOwFOSWsxbDTe+65Z4lP
RL+WncJeLrLIIiXXlGPV1U5tF3XxxgJrufXXX7+PDSZ+gDgA1noAzZ+YHN8H
fnLVVVe1cl1jzUIBPUp5Gmhc6DfMS9hibC6+OelHxGwST/DSSy995ntPjtMb
6ITjoP0xbsjBRm/ceeedq5tuuqk8f/g7/bmEc9x7772t3CXAM8kz7H4Y79XU
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
KvIbPiM+xOvSOzr1g+p8Pg64XjSmuuc7xu7E69Q18FNrmehHjvvF8eDfC5/3
vIRYp1jcxdc1zis9nkdrshx7iUTvoh2Og58KYKvcpsU6WuIG7Kd6W+rdLR3d
9Q63P93UZhWkSWvdx7Vgo52veO8p2VDxIT9m1J3chspeegyjzsdx9B25lqO6
JTqO1qVpZ4c/FAdLPI7HHBM/AxQP7+OHnzwr6kHiuqfmf9cJxYf07PI5zfte
m7NTnqPx65qMnmmNUc9Tj30tPf5f++qY6sum+9A9eQ84R/QfeX9wHcO5TFOc
teKonaOph4rrT4lEovcwWI5DnCx1MQC2SnYk2iu3O35s6SqyT75G9bVgN3O9
rwH9d/EXt8XOV/RTHCd+3vf1+SeuIbWmdi1e60W9Jh+A9o3r2sTwBrHk1IF0
X5XqHLs+A5wvRx4d//bnTc+U+25cexHH6XYs+bkFjZPon9X+Wt/op3iN7IJz
I127xr8fB0QO47ZG3M/thmurcexqfRW/44z7TyR6G534qmJ8i9vCuvwE19Bl
113TmVR5DdKOopZfN4dEDhb1bOw4x9K96v5iHobb46jbc39aK2qtrs/ptW5q
PCeGHqgdSZ0W5ziqj+M+KRA1j6b5VrzG1wfiNJEj+XE7RZ1vR9C5NXb9M7o2
3lMdQumpzuX9e4jnkp3QMaOO45qof85j/dzfF/fVd+njOnlOItG7GCzHoZ6M
5x5pzda0zvL9oi8m5m92A19nckzllTj3qLueGANQF88jjlN3jLo6qc5veF32
XfxHeSp1a9DE8Idq2hBzrLwqfFUej+Pzu8flN/FwwTmOoDHodez8vbqxPRBc
i41j08eB9onXorGlGGHplVH7rRt/Pi7q3nd+Eq/ZY+l8PNbtW5cHkGMwkeht
+BinLsd5551Xm1cleBxB9L8PNG/X2d9O7XHd+tb79MS1YN0x4nraeU08R7xW
z59yW6lr0fcRbW58P23s8Af/3wkTJpTeIdRfUsyxejkI8qlIW1CMlvt7Yq+p
OD5c03B/jz+j0c80GPjzH3XOONb8ufX7iJqueFgdb3J+4v5uP79zqyY70WRP
BrNvIpHofQyG41Cny/eXLZKP3jWUaJvq8h38OJ2speKa09dlsrGuqzcd39dy
us6oO+kYMfcq8qq6tafPCf59pE7eW+C5IOaYepniOPSFjBzH+UKMMxZPcB9u
fB7Zpy7OeDB51QPBn9XIy9035Nze/WZ1fF/HbYp/qbMNvlaIfrFEIpFoFwNx
HHxVMXfcbRpaNPXwFNtbx3GibuFrvG59Vs6TdFzp3nU1cpxzRF4U+ZL7E6LO
7TzL1579zS+RRyXH6R1QA3C//fZr+argOLHvuGuOmrtVJ8pjwDwX0Z+V/mLV
Y7xYu/BnWnlbUR/SOND7bB7f4rmT8XNxfPl1+2fiOqWb+KJEIpEYiOPQA5he
nL6/eI00DNWPR8+ps6/Oe3wd2J/G0s716/i+zm3SiLzWhjiKzzluyyN38fjj
Ok7j9rruOiOvy3iA3gG9HOg7rtxxOI7yqiL8mVG8lseg19XD0zPuiD5S5ZN3
snaIvtqYLxD90a5hRn+SxrgfJ8b6Ru0TxPyoRCKR6BYDcRz6BXpvYxBzQxWr
i33tb8523UOIccCDveamWjUxniEeXxzHa334enGguAC/hmiT9Vpd/ITWxVHH
SY4z/MH/mF4h+HVnm222Wo4T/8/iCXXxse2cN+qW3dTHcd1SsT4eMxz3jxxG
4L5Y73iOeFxD1OUdxHjmRCKR6BaD0XHor6l962Jy60DtPfrV0J+vvzzpJl/9
QNesdWQTtxB3GYxW5Ncg3hPPFfNdZavV26JJU2c/zRVZd6w3wf/+ySefrHba
aafqS1/6UiuvyjlOnSbooBcD4+zll18ufi96XvLzpZdeasXDcQxyHHmNnpTi
BO7rAp3EHAuqw+A5YDo3Y5nrjOM51rlRrXPFKcc1hOtUMV5N58J2cN/eKzeR
SCTaxUAcB7v93nvvlfdV90U2rsmWUjOQfoS33nprdffddxdbjW0U8GvR249c
ddXeaxd+7lj7jNdl9wdzbF+71vkJnEfBVeA1Qp0WI06T8ZMjA/yfn3766WrX
XXdt+aq++c1vtuoc67mKsV8CfIBe3ltvvXW14oorlu073/lO9e1vf7tafvnl
Sw/bDz/8sPTUJq553XXXrS6++OI+tcS9HkE3cSyqw+Cf5zVqHNJ7nD62cCy9
L11WY9BjqJ3XeLycx994bQXhzTffLL3Vzz777PK9JhKJRKcYiOOgv4vjyB8V
13F87sEHH6wuuuii8vnddtutWm211arllluu2Ostttii9BmnFze9y88666zq
lFNOKfZSNZS7uX6PG1BcjnMxbDTzwy233FLmhnPPPbcaM2ZM6QPuOWO6R+9t
GPNkFQvahF/96lfVddddV11//fVlLc461GMUEr2JZ555pjz3s88+e0vHUQ1A
aX4+1nhGH3vsserSSy+tTjrppGrllVdujbllllmm2nzzzauVVlqp/D3XXHNV
hx56aLXXXntVc8wxR3mNHufi2rGuTVNM2GDgsWnE3MFnLr/88mIHGMtLLLFE
4WLwj3vuuadoT7ovPut5XzHmRj5bj62WTQF8Bn7D2Fx99dWrpZZaqrr66qs7
uo9EIpEAg8mrUr8q7ynIT+Zv3mNOX3PNNatpppmmfAY7T51XtgUWWKDEJrBh
9+edd97qi1/8YjXPPPOUPhHEMXRz7dEnJTur62SNyPxzyCGHFJup6/n85z9f
1srwstdff73Vr8rrHDfln3NstCj4GTYe/8G7775b/BWcB24HxzvjjDNKvLZz
rxhHmugNTJgwoU9Pzpg77nM93IFnZbPNNqtmmWWWavrpp69mnnnmUiOZ126/
/faSy0heFtoQY2XaaaetPve5z7XG5eGHH97qw+Zxwp3Et0XwvLOuQbeBVzFm
iDMiLx59Cp71hS98oXAw7AXrBGk2no/leeH6WxxHMdK6B/7mnJdccknRr7hH
7pfjJxKJRKdoJ6/K9eRPPvmk6CLUPVtllVWqGWecsY9/6957763uu+++stbj
mNhurUHZZppppmrbbbftmOPEPBD3C8neEj/AWpprFK9Ze+21yzqUa8GGwnvg
Jcw5ss3S61XnMNbGYb/nn3++9CdaZ511iu9ggw02qEaNGlXmA7gexyeXmPgK
14T8e88aOb0Bnjk0me9973uFvzfVxwE8V/hwN91002rWWWdtjQf4NtrmE088
UTgQgG/jIzrzzDMLB9K+bEcddVSLH+j58pzzbuK+/vSnP1Vjx44tzzMaEueD
s1911VVlXMO74Fxs7HPttde26oS6H85jqmNdqBjLjy8Of90mm2xSxqnuk7rr
iUQi0Skix8GmMO/LxmC3sbO+L7aJmmfwH8VYss0333zFL4W+7UDzeOSRR0pu
LWtVOABaD9p+3HewcI5TF8eJfYU/7bLLLkU74vpYi6KxEyeBnWYNzeusk9H+
4S2KkVY+b8yFBdhtavfD5bgP6Ve+zTnnnIXjcMzIbfQzc8d7A/wPeaa22Wab
om+I43gvB83xzOU8a/7MsC/PJVqg4M8M6wn4D34ifQZ+7RxHMV+eW9UpGO/f
/e53+zzPXLN8rfAc1TrkfjfccMPqgQce6HOv8h97bcAmsN/NN99cbbTRRsU+
zDDDDK110AUXXNDxfSQSiUTkOMSquC0ld1wcRyCn45xzzqkWW2yx1n6s6bba
aqvq8ccfr4074TXWqPAaNA7WsPiq0Dk6ReQ5XleNHomsdWWLVV8fPwA+NmIa
pYmzLbrooiVmiHiaupp+8l3p708//bS67bbbylwDD1xwwQX7zAnwvQMPPLDU
TYlzUfKa3sOjjz5adElpMzxrXgOQZ+qvf/1reQ2twp+VpZdeuhWfDOQvdZCn
ePTRR7c+c9BBB7XiwmLN726eMY55//3391nnoNGidep8XCs+K70Pzzn99NNb
44/nnXWNxkuMD4prEdYLW265ZYv3ScfhvO6r6u+eckwlEgkQ84D8b+ZtdPFF
Flmktu+4gKaMXWadpf3QSOAUyp+qq1OKNkK+1QorrFDsGXGVcIBOofo0Oods
J1zt+OOP78M7uNbRo0cXDgbI1+D8sqvTTTddiS/wtbdDfErg3tD0iUdSP0bF
m4rjMA95Doq+70TvAV8nY0W+KmLRnOPwf4c/o/1JV9QGn/BxIP0jjlXi3tAH
+cyee+7ZJx5nUtVd4jp23333Vp0f1i7wtdNOO60VG8wYWmihhfrcAz3X4WGc
N9Zjdp9szMVk3RP9U8Qn8RM9x31VHuvv9yg7kHmLiUSiP46DJo4tc24Qe3Ji
R8hl1fvEtGAH+QxrLq0/veeOz/HEFW688cbls2uttVaZGzqF4nhjfRp0JuJk
3AZjs9Fb8B2B3/3ud2W+cZ8BsQfESsTvp66Gj//OPfO94fPSsfgdHWfixIkd
319i+ICYY54ncYM6jkN8Gn6p6NdENyUu3veN/ld+kqdHfhXx/cz9ipP3+n3d
xhwTc8O169rgGeid5H+JU6FZRY6DJguHU72oGAPtm8BaZN99923loZFPJv+x
uI77qsRx6vId+6tRlUgkRg4G0nHQnN1+Ec+CXqF9sUvoNc4NWIMRd0xuuNZ6
OqZ62+hvjkWuBraeeB5xjk7vRXX4vMYy+U7EFrsNRmMhBke+MbQp1queq4IP
DVtOXKigOq395X3DDfFZuY5D36IDDjigK19cYniA5w5tgxxE5VXhy3GOAw8m
D5p4k8hx0DXRAoUYT69zMI7IYSIWjny+qGt4Lb5OAafQPUj/JB4a7iOdBF+V
8yBsAbnejH9siI99zyN3nYUaf+hS8Cc0T+KNyEPkdx0XbdV1HI9Vdv9X+oAT
iYQQOY7bBvgLdmbhhRdu2RnstmIhmedZqxE7jP3RPsQgrLfeeiXPCn+UI8br
4qfHXwWXIO8EftDt/cR6y9TYINfJ5xHmFtaM1MkBiv2ULs6GbT/mmGOqt956
q4/9jHVa/dwAnYtYCfVj1Pk4vsdUpw3uTfB/JaYezq7cwRiPw/NGXSj5mnyD
H3h+Ycw50muOulqV6tfWjZ7BGkcxv4qJoXYPda10XDgO+YPOcfibtY/qXXnd
Q12/fkdnveyyy4oeBb879dRTi65KTSn343EdxAfG71p5jlFbVR5X1hJPJEYu
2uU4xFEqdxz+Qq2/mHNBzCG5sOSJi+N4X0udV5oLOomvQTvtr9O0fuN6I8dh
fUjcJLYUUGeZGALPeUcnR3PHfxZrOWurq68GTzvxxBP7rEGZy6hJ2x/HSc7T
G3COo1xrOI7njjP3U+vPtT5t5GXj66pDXQ9Lve590oD3yez02eI59mtDx4Hj
oNF4zHGMsYfTo1uyvgDK8dL6w7UduAzchjUFn/noo4/KPqx7VCda577wwgs/
812Ly/hxAToXeln6rBKJkQvnOOIImrPprRBjjsl3UE9OYgqpCxZjXeAGcCHW
rYoRwAaRh+35IXAbckti7K7HJw4W3nchaixwHHQlv0Z8Y0cccUS5Fz6L5k9u
N7FEblOJfySvRPehuofyWXlNQI9jYg3r9X/4Hd2IGAq/Zv/usz5O74AYFeK9
pNPwvKFXCszjjC1/RtxXFXUcQVzB43cZh+q34PqI+3E6nec91o6Nujz4ofFV
yQ9dF48Dvz/ssMOKBgrUo4Frpd6PeBo5mviM8W8Th4S/intkH/Qcr0XB+iPW
x9E4VL31qON0WxsokUgMb/jcHOMAmzgOediA+Z64A3LEnRtgr+A41NuTHcTW
YN+8pw5+Ko91AXX1fwd7H+JHsnW6D2JtqMnnNpgccmrD4mtjP/Ry4oLimpVa
H3fccUfhZ8DzvlVP2eMMAByHY3scA3MZtQeJN/Lv23+v62eeGJ5QDUCvc+wc
h/n+Rz/6US3Hoeam+jJJo3BtRv0RAO/Bm9EjxWM8B6ub54pnG54RtU3V/xPv
h+NEHQfOc9xxx7VqogP1PtEahnFJ3Bp+LbjTdtttV3I0yWUkVok8R8+vwsbw
nVJ7h9h9Ynh0vz7+pBHneEokEpHjuF2A4xAz4ByHmn7wAn0WboAPJuof+Iao
FyMOozpg0qpVf5XzEZeInoIfh987hdZ00lVk84kfWn/99T+j48BD4GvScbgP
j52W3UWPEsepA+fkPqVHEY/DGtb9EMxl5JM7x4m+hrTJvQM4DrWklDtOnlCs
c0zOntdr0kZtJuVVSaPw+dtr+zEW0Vqo76T1hD//se9IO+Ac9FLg2hWL7zqO
/Lf45Tweh424ZGJssA9C1CnxcSmvjOMyRslFQ3NF08FP5eORa+A1OBY6KXHZ
dfnh8oFnP7hEIhE5jttE1knUW8Xmys6wtvL8Z+Z2r0Wm9RYxPOSOo9UI6rmn
/k+ch/o56M9rrLFG4UUel9kJov8HkJ8efVXkgbCGVD1DfAfwEl83EjsNDyJn
RbaUY+r6Bf5WPWSAPk+eeB3Haar/0xTbkxieUA1A1TmGA8RnG25AX8vIcZjf
yZUC/lw4z2Gjrxp1KhlrxJKp54PGQIx9aRd8Fj8t9YaVww3nWHbZZYsGpTHg
HEdciP4o6EuMDbgYMdbE5sD/NU74jpRXxnHRvBgnni/O6xyTn1pHoSvBh8hp
UP0toDUC50Mn669XbiKRGBlol+PQZ8rzn9FjyD2KdhquQO2OmHeNzcP+6Bz0
ryQ+WTwAv1An9xB7SLldRxPXObSxNuX6Xn311bIPPIgafW5fiaWgx7JiiLDT
P/vZz4o+xTpd9hpbyj6ag7gn4pkVb5ocZ+SBed/rHMMB1HdcgDsToxVzq+AQ
PGd1McWuTdx9992tGuTk7PlYq8vFahfq+00et9cxZuxgF8Qh4G7+Pht+WXEu
1kT4vBlfrIeuuOKKEiNH3DV1pPgO0FCpec7GZ/mJXoMdgeOwkbtJvDNxyayL
0LpYWyhXU7ow4yjr4yQSCTAYjuM9GuA4v/zlL1ufx65SQwPNOfZpYi0nDiFE
vRquQD1huAU56PKDtXsP2DSPB/bz4KtC2/Y8JzQW6hkqz4m4gZgDz/qY2AC+
E3LM4DvcP7UKybciPpLYm7hOpjcE/gOvAah+VU01AJPj9Bbww8BxVAOQvKrI
cXhO7rrrrvI8RV8VnIBnskmDgW+j3cABqItMH0yPfZ8U/cYBPh9yJ8lnd32T
uuFaUxAfw/3pffQYOAhjEB13zJgxhRehv+DH5nfibXif4ysWGb7C/mzSqDzm
GB0H3znrCe81yk+Oo565XjMxY/gTiZGNdjkOvipiWGRHWT8RY8I6MsYWEMeD
fcMe+/kEXocLYBNZn5Gj7b6tduD5I7HGGDyMGvHk8qr+DT/pkcx6GcDFqP3j
9pS5B07CdVKXg2skvgI7jS4Dz3G+J3B+cu69Pg4ch/Vn7PXln0mO0ztAxyEe
R7nPkeNIZ6FmAXqi90GBQyy33HKlNo1yrx0ffPBBGW/UjmHsEDPDa0B6pucZ
dvtMoblwL76GQafU+KLnm/e55TmHn6n3FGudqPPGOjcRL774YlmDxJjjus9p
rCvH0es6dBOPlEgkhj/qYo6d48SenMQcM68r9xOwhkLvwB/kthpNhNjDiy66
qNTaI64XvgCfYG3IOg1dHm4E14n1AjuBOI5svMCx8YPBa5Qngs6C34n1NOtg
9eTkutHJiZkkTgd+tPjii3/GThNLoX5XqofI90BuCLlmijdlQ6ei1jLzFvcO
dyKmW/OP6gclx+kNEGtCvLryqiLH8f8zPJv64TE3Cf8W/h00D/pw33DDDeU5
JdaLZxheAZ/wuuPOcZTv16nPRnaA8cE1EJcjLsOzj35LrDP91XkNPsc6Qtoo
5yYHnrHg98X6gjo3nv+u8YptIJ6ZtZQ0MN9WXXXV8j7+5xhTLJ+V1jrdxiMl
EoneQZ22S+2asWPHln6bsjHkjmPDYvwLMSjYLeZx4lC05sMWowOxJuP9K6+8
svhseA2biB8fXzy+9W576HkNwLo8JeYC7CP1VLGz8DHiAfAX8Bp1VJU3QswA
mhLHIN7A+y5rI05a+S/o7Ghe8CTun+NwDviS4iY5PnYbzoifgc8q/1Y5Z8lx
egPoOMz93ndcmiGIterQ96gJCOdHu2Dc8Fm0QHgFG/5gcrJZE/A7sS2qIwyi
jun1cjqpxeB+H3y15L6jH9FHilhh7gkexjXiU0IHxffsfbOkBbM/98XG56n7
p/HuNc/hTIw/9messHFs1gvEb6OfspbiPM7ddI+u3Uwqf10ikRj+aOI4aDDO
cViToUFgO9QXSjVtsLfkYaDP4L/3uhrM89hEbDT2ir+pA0IuE3G4+JNkVzup
hRc5jWyc1rICugyxmvSEhovASfBBKS6Y/s3k9Lp/jXge1s/ajw1uhr1X/Q98
DtQUjNoN63hstGIneR3+w/fId8Uaua5GbWJ4QxxHMex1HCf+r4lBpqYmcV/o
pzxf5BqyHoAX07uW8YL/l31UpwootkVjJ46FbuqGC4xRNFzGB2sDeDo+K7RJ
1g74rBWf75+lLgR5WOg+xOnQB0L1fFwPxobA+7l3NtYZ7AvvYaO2MnFKF198
cYnXEVyvif6pHE+JRAI0cRy0F+c4+NbxO7EfNpW1l9dLV20vbBP6O/rI6NGj
i48InRnfFa/BJdgHW6XP8tPrBreD2CtC96R4RNeI+J1a+cRBsCZEe0KTIZcc
jUp1/rSvjoWNZZ7BB0HMJfVOlDvCd4U/gdwpYk3R7LlHckbYeJ2YZmqY8Trc
kXMpL0T+hbTJvQFxHOWOD4bjOHgGicUhnhf+AMdm/tfz5jqqaut5zK1rMLG/
dzuoixPjmIx7tB1yt6MvzGNhtPbwepnKJ9d+PuZV87AJ7Keazvo89y2O4zWB
IkdLJBIjF3UcB/sFx0FbFsfBbqvHE/YD+4LNcZ7DTzRquA77ErMIl0GPRwMi
bgVtRPO7Hyv2FRwsZCujv0d5pDH2ktfwXXFN5MKzJvbaHfpOZH8Bmgu1b7gv
9iUXRNfPfhyPtTgbmhZxoNrYn43vgZgDfidGSOtYrUXTJvcGuuU4gOcCTkPc
Fhy6bu6Pemqc28UDOo3J8dhl5zpNvMnHm8Zk3X7OvRj3jIV2n3/xJY+5cf9U
zKFIJBIjE02+a3EcYgSc46hflT6LremGn4DYj7xd+NrR13G+tvN45IHgNrK/
65Id76YWh19f2uPewGA4jtBu3Ih4sZ491fb2Y8eeVe2OK/f76FysZdBuqEXu
/B742JOeyqY871jDyjmeeJE+p+9CW4wd1rHkh/bXI8dJbTSRSPTHcfCpOMfB
14JOAWTHfG2nz7utcp+74P4ZRze6uj5f5/eJfCfmktUdI3KbOq1LvrBu8jey
jkfvoV2OE3lI0/Pgmp/0kjjH+9jrFIpli/W8qQdFrBqapvOV2AtXY83r1qiG
Vbxe/9s/G/3OXhMins9je1ILTSQSjv44DvF91OoQx6GfDH4mgM1jbRd7aLpf
Pfbmjr76aOv1mU7t1EB5JNGO1u2r65dt1mt1Wov7Auo4VR269R8khj7a8VXV
cecm+Fj19YBrG3V8u5OY4zg2xFMUTxPHga9vXNPxse/+NI/FieeO2o1sg/fb
9fPJzuSYSiQSEf1xHOqLqW4M26677lpyk4B6CEeb6jqINs9j9TWXfP0ek9iu
JtKkFcV78/jHujwm13hiPfhoV6P+4/NUXE9H7d19U37sXIP2DjrhOI4mbUav
uWahv32sNX22Xfjz2t97/owPVkvSNcdcMPEZj6F2jlM3nuWvi7lkqY8mEol2
OA65UuI4btPq9Gdfr9XpHNgmOJJ89p3mFukcddxIMZO6BsUORe0JyFa6zW3S
Z7Svzx118Y5NmpVD80TMC0sMX7TDcaL/1MeQ5x65hqFYFM9dis/qpPDfeMxx
nU/X45Fdo4n8oslW6DixTrHGaZ1fOW51mmhynEQiIbSr48S6qrK3voYCsoF1
Mbu+BmyqXdYOYhyPzw+u2fg56o7h5476uPOeunjHGFM52PVs0/efGL5oJx7H
OYTHnESNRmMsapNxPndNpNt53s8Vx2bTdfj48Bxv50DOu7TW8fVFk/4UOVQT
n0okEgmhHY5DP2Dq3elzsk/KXfXjuTYx0Byvz3Raf71p3djEmeK+dTGfWk/W
cRxpQ9G2x7VsXexzcpneRx3HoU+nEPUW5+F12oRer3tu/DXXVvQ8d5pXVbdu
iBynblw5xxHvd87DPsoH09ogajZN11R3fVHn0TXHNUsikRiZGIjjLL/88rUc
B2BDFJfjtqVOv/F5X39HzbnTWNymdZ+4Vn88QzGLXhsnrlvjnKTrjP4Avw5f
j/tnnfelnt6bqOM4sSdnkwZRF3/T33Pi7ytWXpqIeHq7fVLc11rHj/y4TfzJ
x4DH3Xm8jY+ZgdYFcT0R4+qi/pU94BKJhNuUaEupOyaOoz4E0VeFDSGexjkO
r+u1uObzNaY0II+V6XTdJZsWa4V47HDdPbom4/ZavMf/9nvw2AiPJXC+U3c9
znH8urNWWe+A/z0ch3rX6ldFjyl6sQr+f/c5uK7eknRSf2brag/7OiHG5Hai
49T5pvQ710itY49ra9J1nLvUrWfiOfx6+Rsu5DVG9T3FvAHnQTHeP5FIjEy4
rqK/++M4xBxHjuP54eIw4jh1moyOL46jOb+/NeFg7iPWhXfd3m2o29rIN/z1
qPd7DodrPtF35bzHc7N8X7fh+myiN8D/lp6R9PNQ/zJ6aDrHAdGX2+2z4HqH
z/HdjCnBn/G694HOG/O4XafR2BD3GIzGpM/X3WvdNaePKpFICJ1wHPdVuU3B
XlGT3ddcvo7TPk15qN2gv5iG/rSbunWn1+jxNaLzmxh7FDWi2AtU0HEGimtI
DG88+eST1Q9+8IPSj1U9XN1XBXxcxPka7o+vmJ4o1NtDM2FsUY/Ka+rxHrWH
qTusY3h8y6SAfEuuazbxMa6L/hNcj8aX15rS8y/uJZ2T17gXfU7+Np3L7Yv3
rfAx6v6p9AMnEgnQLccB2CJsT11fKIDdov8k/QXpY0mdZNdBJgV8vRr9SWxR
7+8P0l90XK9nH+OMXb/x+ID+Yorq1te+vk0Mfzz99NNlrHzlK18p42aBBRbo
E3Mc420cPAf0Hz/ooINKH1eOA1/acccdy+9nnHFG6c/JOLr77rtL3+/bbrut
cAQQn6Vu/DXqRxd7ZdG37Z577qluv/320n/NodrGMT4v+pRc96Gn3Y033lhd
d9111VNPPVV6yNHrTv3h6HdOXhq9SdHD4H/67tRHxmOIktskEgnQja9KUL1j
/5sel9hhbP3ll19e6iOvtdZa1brrrlsdeOCB1Q033FBs2XPPPVf4D9o+Nuz9
99/v+l6iD4C/1R9d4N7ox8l6m/X1o48+WnqFsib247n/SzGTAueSfa0D73M/
L7zwQrlP+kjTh1RzjvMcX98mhjf43/JsE7s2++yzt3Qc5Y4rXjfG4bzxxhvl
WYE3rLPOOq04f/xc1Bqnpwq/L7bYYmU8HXvssdUWW2xRXvvhD3/YJ9/R48I6
yavScRgzrF8AY5xrJNbotNNOqzbccMNqjTXWqA455JDW2oVriD4uf8b9d71P
f9prrrmm+u53v1utvvrq5Xs7/PDDq5NOOqmch5/YjO22267keNJPxnvmcV1c
YxxXTTmViURi5KBdjrPzzju3agAKrlsw58Nt4EJLLrlktcQSS1Tf+MY3iq3/
8pe/XGIw55lnnmKzV1xxxWrppZeuVlhhhbLfKqusUt17770d34fzEPdZxX7k
cDTWi1tvvXW5DuaMxRdfvNp0002LrXWe42tO1SuMccmu3fh3yfr25JNPLscl
NuP8888v3E88KcYmpLbeG+A5mDBhQh8dhzEgX5VivRxoFvvvv395HhdaaKFq
xhlnLJ/jubzggguq559/voyrsWPHVhtvvHHJ0/rqV7/aytvaZ599WjoOz5R0
y055s/MkPedcP/yD8crYZoO7cR1cJ9wDPQlflY6hujfy3+p3PefYC9ZB++23
XzXffPNVM8wwQzXbbLMV3ob2xU/sBd/jLLPMUk077bTVaqutVtYmgnhY9Flx
bNeTEonEyEM3virP88Z+oVVcccUV1Z577tmy7WxwlyOPPLI67rjjyvqMDZu2
1FJLtfZhm2mmmaorr7yyI5vkeaox/0J/8/P1118vfUZZL8K3+LnBBhu0rmHV
VVctvoDf/OY3n/me1H9TsQmeF/LOO+8UrZ219THHHFO4DX6GRRddtJpuuunK
PEDePet7j8WM9ecTwx/8P5mDWQ8oHsdzx/2Z5Hd8WDwbPCM+FjbaaKPyTBGT
IzAm8RHBmVkzaH90nL/85S9ln1ifphNfldsFzolPbMstt2zFULM2OfPMM4uf
TLUlZp555nJdv/jFLwq3AKorETmOwGv3339/4W3cs9uDum2ZZZapLr300uK/
EtxH7Planp+eSCRGJrrxVXn8MH7zgw8+uGgiaDbsz1qUOR776DGGHB97PG7c
uGrUqFHFNnJsbDwcp8n30x+a8kRdG+cazznnnFaPUTgOug3+AeYT1pC8zroR
PkZ/ZfVJdu1Geo70GN4nXgDextoTfjf99NOXY+l7Yz7afffdCw8UYpx06ji9
gyeeeKLaYYcdWpwg1jkG/N/ffffdMqZ8HkevQPu77777+sS263ljfLz44osl
Pgf+LB3H8x3rcqw6xcSJE6utttqq9UyrThYxMYwD9Mm55567dZ9wfMXoeA2G
Jv/RXXfdVbQZxt/nP//5aq655irfG3/zXZB3j16E1ovfu6mWjnyAXtchfVWJ
xMhGuxyH2Mf33nuvvC/7gq279dZb+9QKZPvOd75TtHW4Qh3gOfjx8emzP2te
+pzDIdpFXR6VwHXi87/66qtLTJBsNVwM+4rOje1kjahrx+9/7rnnlhgDfS86
Vl2tQvxb+NlOOeWUMvfMO++8fb4LzgUHYm7SsZpitBPDH8R3ET8iXxK+qshx
8C0RW7zSSiv1eVYWXnjhot8Qqy/EHCaeG+Jv8RcxNtFOpffEmLRuYo45D8+1
a67wEHRZ4cc//nHhILw3zTTTFC4yfvz4PteuXHKtETyujdg87gNOg65KfA96
EL8Tb3TqqaeWcYo25n5krxMBYoxbIpFItMtxiHX0uGD56V3H1oaNJ1/Cc48i
iMFlvSvbiQ7dSc6V+6q8bxRgriBOgBhJfP1aK3Nf5Hpxv8Qfw9/w98tXMHr0
6BILXffd6JzOdYh9xI/37LPPlu+Jc+i7INaAeYFYSR3D89fjmjQxvAGfYX7W
MxDzqqT9wU3QQDS+5AdyvU95SoqREYj/xR/KZzbZZJOy9vC4e+8D18lzxefg
+EcffXTRVjgPPAQ+wtpFaxHGCPen6+de+Iz0WI+n55pYU7gGiu94zjnnLGMP
LRgNCG2VdRPfWV0ep/fZrbvH1G8SiQToNncc/sA6y+dz2UJiKLXucj7gtodz
4BfCrwXH4XydrsOifRfQkYhXUM1Z+aNYKxLvCFhTH3HEES1/leYlOJAf33/K
9xY5GTGXfCfwGh2LdTz3KV3IjwO8znNi+OOhhx4qvINnmv//t771rc/oOPii
8JsyttA/9Kzg73Vu7bHu/szAe26++eaiA6Edsp6IY7kbXxWfuemmm8rxpX0y
hsh/IvdLHIc8K+c4bGiWn376aZ/rFUfzupicg9wprS34HL4xYrCJ2+b3t99+
u9gRxhXfg7RPbc7ldEyvYZVIJEYuOuE4n3zySWt/7NxRRx3Vsm3YauzVIoss
UtZ6yilvignGTrNmJeYQjQV7F2txDPY+YhyC8Ic//KEc320w/APeQ9464Jxw
ENlaNtaW6Ojx+3G/ga8h9b1hg88+++ySE+LnI9a6LpY5+hYSwx/UcCHGS3G0
cFx8Og60RfFgjRt+x9dDPI8Q8wU1hwNicDguvjF8v1FnbIpTGwz4DPH34mls
+N4233zzEiesMYCOK1+VNnKsqMXgfmevK+7rBfy7+hx2g7HKRi4AcUD0/WIj
f5x4ZkExxTE3MWtNJRIJIfpfIschPobYFO9Xpdxx9oPvUKtM72Or0XSog4MN
l40byN6wxiUnKdaCjWsyt9tuu+u4jX6H4zDfRI5z6KGHFjsMmEOOP/74Putp
YmguvPDCUlvH5xbvq+XXoGtkvUlND8+T4Xd0eJ1P1+f9e1Jf7x0QZ4aOI+2Q
WFxxHP7vjBtywuUDYvyI45CbLX2xG3Qbm8IzyZj0cUN+AD5f8gj0rEaOwxha
b731SqyRcr2AxxvruhhLrC18nBBvzTnQvmIstmLa0I9j7WWQsfuJRGKwgOMw
x1N7TByG3CDFEGNfqNux/fbb97FF5BURi0CsonJIBWnVysHWegubhQ+Mc3oP
TX6iTysfS3pHUz8/79MjzkGcwmabbdbnGplz8E2hiete4Diu46ArYX/RysVr
/NrEeTymRt8bc8Mcc8zROhYxF+g4XrvMuU3G4vQW8FURo6YaCjF3HO0SHVHv
M740xsgxosaAg/GC7wefDTFs8Gh+wr+Vn83frD+IPfZ8rE7BMcmR8nGDpoO+
An8RtyBmxn1VjCFqX8V8A1+X6LNcP2MFXzUa0QEHHFDi/T744IMSm0depsf5
8H2Rk0/8nI+5uN7IsZRIJAZCHcfZa6+9WvE42FTWq6y73A6SH0UcMdqMaqQC
7A51LdC5yRu55ZZbSr4EMS8PP/xw0ffx/2M/icdUTWDPn/DenXW8wOtwyI6S
nytflXJtyXsif0MchzkDzuM6DvacOAdiI1RHNfZz4HqYY9TLApBnduKJJ5aY
Hx2P3+Wrcjuc687eA88EzzTjwnPHFXPMs8Pzja4njuN52eQjErcO9NwTg8v8
D29ibBFrzFhk23vvvcvag9epa3nZZZe1eh10o+PA3+H9keOgTxFLpGeWce6a
C888NoO8ROc46kEVY4rQijkmNaWoXyWQC4nvGv+VXwMx2cTqOHy9kTnjiURi
MKjjONhTxRHDC8jnJH/K80LQlPFpobc7x8H2wG3wY+H/Yr26/vrrF/uGNk2t
QOIt0bmxe9SzafKjRbhdUz9zrWWd42gugeMwZ8h3BJ/Cd+X3gZ8BjYr1t+qo
eu6W54BrPQ3QpPBVod2I43C+mFflOSGJ3gEcGw7AM6faT67jADQZYrbU64FY
d54Vnj9ifOWrUq0XjTNilGNdAmkn+Hmof0ANKOWROyfvBO5HEschNsbjpyPH
YSPvm/WKai/re1GOmOcEsM6hvg+2wX1bXDN9q9CE/djksXtMtviN68I5rhKJ
xEBo4jjYZ4AdQZfZd999++gfaM7oH8RNej0/bA5rO2w0thIuxBwAl2DDzqOz
kJtKXhJ6dIyvqeM4vOY1TcVzdG58VcRJSu9WzhScht4KANtLvqvbUmIl4CVo
PdKFZJvFd+pyV+A4zA2s0XU+7hnd3/OqVGs++1T1Fvh/okmi4yhel5hj/FcC
z9NVV13Vitli/MC/1auAGGKg54uxCD+G+8CfxY20wW14vjgvvh7FJKunQSf1
GDj3CSec0Oc8jG30oscff7y1X/RVsW277bZFe4p9ybkW1hPqHcc5+B7QrtZe
e+1SA9R7XqHlUG8w6jjey4Fx7n05UxdNJBKDQR3HoZ6H546TN+Vxidhp4lDQ
ashJUsyxbDVxBtSAhyt5zT3xjzXXXLPkcuC7IrYgchzlZjgvEKfxPuOePw4P
Qyfyc5G7Ao+ixgjA5np+mPxL1O5Ar2riIG5LpcPjJ2Ae4vMejwNfgrcJHr+c
a8/eAf9DNBtyghRzjM7hHAfgk3U/DPwGroPG6RwiztfM7/SH0udYF5DHpBzB
eC1ej7wd8Dwy/v05JtcQjZZ8ca0h4GOR4+CH8x4UgOfde/ey9uD4aLmsd7gP
4ngYc/JxkTcW60BjjzwmW+ubzElMJBLtoInjxJ6c+NFlf4gdhONgu+Ey8lWJ
dwDsLj4iYgrUe1AxvnyG43udMF+beR8aj6v0GBfFJQtoJ/i/3E6iFdFrh3hi
AI+Bg3hcBDoMtWQFron90XVYX/q6UfZba274E7nj+t5Yrx922GGt+B9dq/+e
+a69A/w3A3Ec8qCJn1EtZH82FY8j+LNCnL9zHHgR8TjkD/r+TfXxBgs+C5dB
k1FcERyH+4KfNdUAZEMT1bOM7ksuFD4pPocexXhjvRN9XMTywWlUY4Hxxvn7
i8eJvuNEIpEYDAaKOQbYFfxP0uTZD56Alo52rnr04gECa07Wg157g55OZ511
VjmvH9/XobLd3ucp5m/HOjPYSeymYiPkq6LehnxVnJPrVQ9FNrjaHXfc0ToO
a3PqGqLVn3feeUWTwc5zftUmA8TmEHOsvGBpQhyfOm1CXHdmblVvgP8jfAb/
qGpjEo9DfL6DcUQPW3Qbn8P5W76qOsA76E2u/fHxsl6gPjDPoDi/8q26qakJ
P8F/JE7FmgR7QN0sPe/wuZg7zvMvMIbQZ9FO2chxhKM4x1E+I/yFWDw0HsYR
/m5qDvr3g1/LOU5dflUikUgMhIHicbAn2FB0dfI5WeO53eU1/ERefxSgd9AL
kx7f2Ez25fjoOPAAenjHmqUxZsXrfXlcjPiQ9B5+J+6RerD4+6UbsS4lJlQ5
uugyxCBrTkI3Jy4CTZwYa+Ys6iJzj/Ay/GzoQOS4ek02Ad7nGj+61pgxY8r+
dfB694nhDf6P6qUtXo2mh//VwbNJHhHxts6/2Rf/LzH3EWiS5AN6XXE4BX1I
WDfIX6p8v5jH1AkYA66Dcm60W4FYYfF5xgbxM8ToMBbRbFjLOEfheq+//vpy
f3AzX1fwt2qMEs+DvaF/l2u9aMnq+Qkix6nLW0wkEomIJh1HHIf5GP8NG3aQ
/Af39ZAD8qMf/egzGjraCbqKNBzlc6Pr4y+CF7luA1y78WPFumLeFwcupXUt
a2bWo6wBtWZkLUxNetaL1GejX6fWlKyl6acM98HWos+75sS28sorl1rzgPNy
DuI9sb/koasXs3wVcCjybdB/4DpwL6+XLE6WGN7gf3jPPfeUOjKu43guktfA
4xmED3mMOvsTt45Pl/GDFslzSJwLGiQx7Gzyc6EZ4cNSTJrHo3Va41ifI2aN
2GNqE4qPMNbRmvBTwWHgaLzHOIGHcX9wLLSrqMMwvsaNG9d6n/qc6qHCOoJ7
ZozA5dyXjX3gvNQfxNfl33fURL0maHKcRCJRh4F0HLejzNfkR6B9eF9LuAI9
vZVDCn9B/3CtXcfGhqHjvPd/+5qDqOfEmJVow6TrMHfEnt7oQ/AWuJe0HDR1
ahXCuRQ7gV5OXi88hGPgoyIW0u20eIt6J6L1oLHjx0KLZ+2JfRZ/47tg3iIv
mBxg4o7QkPS9eP3CxPAG/0OeKTiOOEjMHRcXATw78B/WDx6fgjZCDjbPEzla
PDvwCPRBYruokUdtA16DJ/AsKo7Nx0Un9Y6lifJMckx4C3XLifuBizFWsAts
nJ+xRA1icr0FPssYIjbHazKwPzouIMcKu7HGGmuUNQQ6KfeMHXFdmM/Q5xZ9
DPvjdkF9LmJ8W7d1nhOJRG8DjkOtUvwydRzHbSncg7UmuVTkkqOXaG1GDCW6
BvlSrPngELzG+g5dm/3hBOyPPSSXgjoZxK6wsWaLviihrs5p7Mnp+6CPEwPB
upn5BFuKfdU6lPmEWAO4mECcMJyEfbWuZJ7hu1DMMtdMjT/vz4yNZj82YntY
06PTzz///GWuYM7DxoNcc/YW4DjkFrqOEzmOz788r8QgU9uG5woejH+IsYef
k5+jR48u8bf4iYjJ5dlBf2QM8RrPIr5j95t2+lzVjTWO/cwzz5ScQa6PMQT3
gmfx7KMjCX4+4qep6cw6gvHPOobXdP+sPfB3oeGSHyZOx+/sz+eoRUg+GZqr
ju/j3Wv+eY+UHE+JRKIJcBzyONUbOfqqlL/kOdzoz+RFXXfddaW2H/4acoqI
SURjJ9YAbQcdnjUf/IWNeqb0/kQ3IucUfZxascwL8AdBsTkRnkMS17CuYyuG
CFtNzDExQcw/XCdzBa8TJ+28iPOht1DTjBx04iax2eSKKO4Svxh5I8RFjBo1
qvgO4DGsPfnJvIWtpk4tf6PVw6N0bXWx0onhCzjOOuus0+rJ2eSrcjCemMPh
9/hI8dnglyG+neeF2siMDeXvAeoUwC3g4R5vDLqNv63jBzyfnB8bgEaj/iuM
D9XAjBoKPlj24VoZ69wjMfqeN8mYZNyxD/ePtsW9svEa5/RxX+ef0rlzLCUS
CUeMaxGwW/iZ3E9DTKDHHDetlbBR8AVyRcm/Rjuhxjy6NLEKXrMdEHOAbx7d
BpuIbYMD8LrWbqBJf/Z13WBqI2MjiYdE+yb+kb4SzCFuR+NnuSbyOaizxmfj
ehl7T9wnMQqsUzkePIiYHWKQ+Jv5iL+J2/GezFl/vrcAP4cPew1A5zjxGW0C
cztcQrXF69Bf/Zsp/Tz5GBzo3N087/35oXIsJRIJR1OsC1o460dia8Vx0CDE
cRKJRD3wIeGLVTxOHcfJOTiRSCQmP2KvSQGOc/XVV5fYmjodJ5FI1AOtj3gV
xeMkx0kkEompA3GcqO8q58E5DrUpkuMkEv0DjkOuk3xVMeY4OU4ikUhMGSTH
SSQmLZLjJBKJxNBAfzHH1M2jLoc4judVJRKJesSY4+Q4iUQiMXXQxHHI2SQf
KjlOItEeyNeD46hHQ3KcRCKRmDpoqrFLTYuYO+41ABOJRD3gONQ5bqqPkxwn
kUgkpgyaOA71YOg3RZ8acRxqEifHSST6Bxxn/fXXT46TSCQSUxlNHId6o/TE
SY6TSLSH5DiJRCIxNDAQx6HHgnOc/mquJhIjHYwn+svTb6qJ4yQSiURiyqAd
jkNv4eQ4iUQzGE/qyakerslxEolEYurAez054DgXX3xx6aFJT062bjlOt30C
B4PYh1OvtXPe+J3U9W9WXSEd18/RiS+ijmcmhh9cxxHHoSftz3/+89Y+9GCj
7+zjjz9e+j6Qa3777beXvml33HFH4UjU2GHjd71HX1jtQw/Yhx56qPTjpNdl
hPrXduMTa3qOqZ31yiuvlHOTfxk/E3uq01OrqYdmPP6//vWv6rnnniv3Tl9S
9b1tOj6/09OLz7zwwgvVW2+9Vfr4sr333nvlb/rj0S+O3u70wPPP57hLJEYm
4DgXXHBBtcwyy1TTTDNN2dxXhe2ihg49ktnYH1uD3aNn5bvvvltid7Azr776
avWb3/ym9BrHDmFvsPFvv/126cP5zjvvFLs5KXoFy6aKk6gPsfct5DVsKXHV
XCP3RN/jaJvjMZRfr37k9NXUPKJzyAb7vfC3zsf35Hab/fkcvUizV/LwhziO
51UtsMACLY7D+/RoPe2006rRo0dXiy66aLXgggtWc889dzXPPPMUPsS28MIL
V4ssskj1ta99rZprrrnKe2z8Psccc5RtqaWWqg477LAypvzZ5Rz09mbrZv52
3s6zCTdjrMO5sAXkWcK7Pvzww9J3XDUoNA4ArzO2eL7j9+TXpl688Lbvf//7
5d523nnn0uOW3qSMNY0PHZ+Nc1PjYsstt6y23Xbb6qSTTir9f9nOPvvs6uST
T66OPPLIapdddik9xMijUI90jtfEvxKJRG+jjuOg4/A6YJ1Er/ATTjih2nHH
HYs9wsZssskm1VZbbVX94Ac/KHaF93id1zbbbLPyPrZmiy22KK9vs802xQ49
/fTTxcY19VAeLNRjFJuJbcQuO6fgvaeeeqo6+uijqx122KHYU6719NNPL3OF
IBuszesHScPhWBybjd99PvDf6T9+/PHHl+/jzDPPLPxP54D7sPm8kBi+4P9+
9913F1+V6uPQr4qxAvhfwxGonzPddNO1/MDTTjttNe+88xauo9d8g9sstNBC
1Ze//OU+r5MTcP311/fpYw/0bNZptIOFP+8TJ06szjrrrDLOqX3+pS99qfQc
XW655coYx6/NWkacX+OHv+EUGh9aM/jzjk2hN96uu+5a9C/4HfyQ72+ttdYq
due8884r6yRdFxv6Fd/1pptuWs0666xl47N8J2zwpMUWW6xwSK5X9S/4HwBf
ozT57BOJRG+iieNIx0H/Zc2E/ZC9ZW1Jn3Js4JxzzvkZO419xvasttpqxZ67
naZvBJoPNqddyEa5TcZ+oQ3BcWRvP/744xIXAdfA5s0///xlHa05ZJ999inr
yE8++aR1bNllt9t1eo76YYjzCOhUBx10UPXFL36xnGfttdeunn/++dZ1i4fF
nqiJ4Qn+h3CYUaNGtTgOWgy+F4CmceGFF1ZLLrlk8f9OP/30ZQzxTJ5//vmF
e+uZ1LbEEktUBxxwQNEm4MrEyOnYjCPmf83bdXymXY7jGgv8BD8QzzD3wTkZ
O2uuuWa1+uqrt8Y513juuecWnUfQmADuO3PtBB0GbUVxf3wfaDLYGuyI+pqi
beE75/vT/TCeTznllKKT1fHCuC299NLVJZdc0tJx+OlczNcpiUSitxE5DutM
OIByx3//+99X+++/f2t9NNtss1WHHHJI0eTHjx9f1rHRxmAXx40bVz366KPF
lmtNyvp0zJgxxXfVyZpTvEPcg7+xX9LPwUcffVSua/PNNy98g+tFw8a+Lrvs
si3bzdzENfqcIVstDiNbzd/oRZyHc/I7NlgchzqK2H3NDXyH6FnMGYKOoTVl
YviDmJlVVlmlT51juDPgWTnjjDOKXgPHQXfA3zRhwoTyvBAzQt65xgxjDy3j
xhtvLHP6m2++WbiQnlmeZfQV+YK60W0EzfkAnzJ8w9csaLBok3B1etjBQ7hO
xjexQqwtgLQkrofrY+PYGh+MK/Qbxr80rfnmm6+69tprC/dhPYI/T+f93ve+
Vz3xxBNlXQCwRYxhXRvX4NqYb3BKro01msfQ6dpkK1JLTSRGBup0HDiOfFVw
nN13373EVRIncPjhhxetGrz00kvVTjvt1OrXw4Y95zXiCLEt6EDYetZ/fP7g
gw9ufb5dRH1FNlq2jLgh4jq33nrromfLlt55552F+5x44ol9dCW0b3wL+M6A
NGz339fxKOnygNikU089tcRs67jwKtbrfAeC4ocyLqB3AB9Bm/S8KvVy4Bk5
5phjii+GMbH99ttXzzzzTOu5YVzhx3KOs8Yaa5QYY3ED1gL4jMSbjzvuuNZ7
0hcV49WJNiH+Dpe45557ig3Q9cAnGLcC6wbGkvgW90MsdYyF83g113CI63Eu
gnYDzwNc/2677dZ6j+8RPQu9F2CLsDvYGfQfuCH7oxPDaVhnYbPwp3OdrD8i
XMNJfpNIjBw0cRzN+/CR7bbbrtiexRdfvKxDAXaCOEFsndax2vDbE/OimBts
NfYc+4S+IR9Op5CNcq0dPQZtaY899ig2kutgrUePiocffrjYNn667gTnIkYn
Xo/nV4njYIdjfgivs5bHd+ccD50InudcznWhxPAHzwU6BNx2hhlmaMXjKOaY
eRbtQ88F/ES6BEDjQwPSM8NPYl6Yoz2nEd2TccP7P/zhD/vojpq30QZ5FjuJ
ceM45Aaw9sCPKz6FL5r7E08hHgY/kvurifXVOeN6Q0DrwaeH71af5X423njj
ohEBvhfnOGx8r+Q0AHQt4mv4ntBK0V+J58YfhU+PMSg+1PS/yji4RGJkos5X
hT1RrApaxEYbbdTSgWWXsH1ozMQSO8fhGGjNrNFk/4i9XWeddcr7cIwnn3yy
o2t1jhH5xvvvv18dddRRRafhHjgXfgK4hq4Zm0n8Mdeoa/3Wt75VtO14Hv9d
PizZSgBnefbZZ4vGpTlKvGr22Wcv3Im8W2FS+BYSQwdwimuuuaZwaOVVEW+D
fxYwL6Pl6bnA7yTwLLGfesSJw8BxiCuWhgp4NtGK0AYPPfTQVv64+1X53WNi
2gG8BM5A3K7GDRoofiry3XVM9FHWOM5DuB5xriaOQ5waWhRjQsdnDcB3Q24m
QH/170pxP/L1wl/wPUv/eeSRR4q/jzUWuW2Ma+ljdch8xkRi5KIpHkdrSTQO
eAk6NbZKaytsCvaFHCryLmSbsPfYR+ISyGkF8A9iesiR5T3NA+3CY4IjX8CW
4ntyO8mcc8QRR7T0FOYdrkMcR+vR2267rbwvDqN5Q7xEGrz+Zt2JfUUzIp+D
WEhsuNbA2HC0L9aagvT85Dm9ATjuDTfcUPQO+argy8y/gHkbTQYfDXE48GH5
b9jg+dJxFFsCl7n11ltbcS4AnxbHOfbYY4uWojHlNQ6ETp4tjkE8r3iWOAhr
A2JiBHy6MUYa7QX+4flK8RpY66y00kqtsaHYbGL6XnvttbIP90uulR+b75Jc
cTgd5yBPU2Oaa8N3xflZj/HdoHeNHTu2+KXFu/SdiH/JT5xjMJEYOWjKq5Kv
irUW9oR8C+ycYpGxtdhcbI9iX9iIS0SHRp/WmhNOgIZPrZBzzjmn5Kd2Cp8n
3FbBcahVEu0kMRHiOPAyYqBddyHnivsAigvWuk88R3GUAtrWXnvtVfgR/AZ/
HfOVuBPfBxxHObDK/1LMcqI3wDNOzpH4gdc55tlknQCvVl6PuDJg7UD8TYxR
IR5HOUXaePY4FrxJz6R+1tWtbAc888Sp+XWgGcEf8EtLt4S7MZ58P+LeqAXh
+exx/cExFDetjdhjxqU4DvYBPdT3IR4IfkgsNPHXrKX0Hj41NCW0J/aDO7HB
FfFx8R2i88Qan8lzEomRh6YagOIy2Ft4DvaI9ZZsNBwHrQY7p7xP6e7E3shW
A+wM9pkagKoD2CmUxx1jd4lt9jwVcRxq8ojjYK//d3vnEiJH1YZhVFwogiLe
deFCFyoq4jUgKO5060J0oRtjFIKIoiIhihEd3JjLJIwmGhUXLiRkofEuBgRB
JG50EUQQoxLExEtMVHRxfp76eYd3jlU90z2dpLvnfaCYme7q6uqeOl+957sd
4vfYQ+mRM888s5kvMvfz3hluC90Hz2dif2ws810+P7oNnaP5PHVk2GzZcL4r
9TaLbZ0c6tpxzzmGXn240TjkzPr1ik8Ivc3cQH6/Gult5ZfUPSr7heueGK/r
fjQOGh5fpfobk1/sGocxxFyG8yWu7f0c/HOjjeoYF8fB94J2gbZ8HPyijCHi
zORqK5+H8yQviffFxiiG5flw1KdTf69aL6+varMdIYTJpUvjMP/sBXYV3wz9
/TwfBxuD7SN+Lz/OMHp5gNdtyFcvsJdepyK/Nn54fDyAzsInhX2WTcee46Mi
d0bHc1+R9wvjfem5T+0s+obcHmwtMQt6fSj3lGPie5fG4bvyepgw/vB/pPcv
/ru2uipQHY+uI4fY1bJly+Zcr/xNfZNrHL3e6/3YNAZUDz2oxkFfoHE8fis/
DvqEMQPMZ6h/d42D7uDap26qS+Ogk+oYF7nZxJCJw+kcaj8OGofYOH08qd8k
fs74RhuxToMg7k0dg/pSaWP8Kcdb35/OLT2qQphcajs4nx/H781uR7Gr1Clh
X2qNQ14MvdA0B2ybz/br0/D+FnW/PqB2q45VoXGoJ5UtxRYzB/Q5K7lExJXQ
a4pHeV2ufPU8h71Fy3APoE8rORXYUXIo/H7FMck5xs/u598WYwvjCdcg+cH4
DKQPuHf7mpy6r7bV1JFPS5zLr1f+RuPI/+m14e5X1OOqpWrLT1sonBe6wc+D
WCt9wdEnGrucl2scNvL0FBfqgjFDzpq/Di1IPg6+V8DPid/I9yEOjE4hLkyc
Dt8pPajwKXv9GOePP41cP389Ocz0i/Dvq16nJYQwOXhvddcc2Cdy9egNqjU5
sTfSON6Lpl6fBnuOH0d1JdqInVOTIY2j13i+y6D5kbJv7oMGYmDSONIw3HOw
39I4+NRXrlz5H788c0R84nXtrc/30EDYdPw3xBiw3QI9R8zCcwno78E6GPX5
6/OH8YbrAj8OOTTKGa79OJ7vWut87t1+zbDhE1KsSnjvmbZ6v2Hcq6lr9/NA
o1MbSXxK4Jet83HYhx4R6qvQRpfGoSZLMWQ0jtfZax/yiOkNzvP06mH84XOS
X1YwdtXbR3qTuQjnxmu9r1bWrgphMpFN1JxSoEPoOY/GkX3B3kjjdOUz4r/A
ntexKtkX9I/PR319qcXaF8/JEdSnKx9Hdo55p8eqiBmRj+MaBz1CXW+vddax
k56Xia3dvn17k4ONr54erORVcq8jH4mcSPIEmHsyF8aW8z3r+4/GGX+4nvHf
oXcVo+zSOB4r0VjCH1FrHOqPqAtyjbPYnOKFfA5qAXyeQtwHHwr5xNL4xK3q
tRSoUfT1UNpAf9C/Wd+R/Kvk/mtckhNUaxzGE/ExYub0vyE+rHw/6tT4/lQv
jk+MvhY+9lkrDz+r8uwE/4tBewmFEEYX99f6+JYfhxoF2Rf343TNebDD+GrI
ua37HNMzB/uiegu/tw/DVssf4vNHNE4dq6LfCP5tzRfZl/mg5x6Qc8x83Gsv
sIueZ4z+IX/A7wHYezbqssgdIO+a74E5sH7Sn4ccAvrY40vydQHDeMO1wb2X
GGWXxgH3n7pfED9OHavyuiohfVT7cIZ1DXFNbt26talHkj8KXyX5ONSOax6B
Vqceys+X3DY9zzkybvCnfv3117M5RYxL5hXuA+I4zAsUy+V11IDXuUnk4eDX
ImfZNRjjjnGs2s+2vGbiz+ggfd/eVytrcoYwedR5tAI7gR+DnluyD9gbYtng
8WvPJXE/jmsc9IP61sv+ae0D11aLsdGKm/nx0BB1fxx8U6xjqPoNbCl+edc4
1ECpPw5gd+lHsmnTptle82i1tWvXNn1e2Z97AHmmaB33YXGvU/4pm2pPuG+h
Gb3WN4w3/A9fe+21phaqrXZcdMWI6Z9Q11Xh1yGn3fsh13rG48aumwbVPZwT
ufHEdNH7ilUxX8BPpRw1dESd80Kum84JPYSWIU+YXDT0D/4VfKDUkHn9E3MC
7wHI563zcfBp0X+ZXsb+ODoMvUQcCy3I5+f/UGscNBp9uUIISwPZxvoei4+C
2mfFzPHDkJ9Cfq6/znt7CHzZrNvg93nsPY9h1/Q+yilwGz+oPXbN5XYde4aN
ZY4nnUHfQvza8omTl0zfPreF2Ea0GvqHHEjWnuK+xePsy2eUnca/jv6jDot5
KD5++nzQIwifjecz4BfD/848lO/S6zqiccYfaRzuxZ6P06Zx2v7f+HGI4fi1
yN/eW1jvUx9POSXKRXadMwgcj7iQz3PIZaMWQaDTfS0H9BlxNd6bcUOdgveQ
QO8zTwDOEw3lcwt8WOTLADk3XjvOGivk6zBvwcfqY4s5Bs+hy/jsHAN9hD/V
90F/KRe6zsdJz/EQJpO2uR7xdOZEqu/E90DtkWJVyqGp82j4mzxcfMLuR0bv
qCbD8wr8vbvs/nznji8IveH9LnROPE49LppGeg07yzoU8ilxvl5fzroP6BVq
UZlToml4jNdhj/HX8Fmwpxwfvzs+IX6iW8gV4Ll169Y1PWo934BcBXKR+X69
507s62TA/1Brcure3aVx/LrnGuaezn61xkEvETdi7Hn+XD1WPLdtWPmz9KvE
5+gahfgseWRsa9asabQDzzG+8PHwOHMDfq/jbmyMC8HaV66h6HWMbgLGnvf4
Q8MwZ+G7wpeKX+jUU0+djS3zvTMe8bliqzgv6Uzy6xjz6C/5kRXb1tq6g6xf
GkIYfdo0Dvfpp59+etYPja2gJkhr5ng/DsBG0FsdvcDcjNpZ9WiXbcQPwjyK
Wgz0QJ3fN0gNNfsSM3KNI9slG4+9pV8GNhF9ovsOda/E3jgnzQm1Njg5kRwD
PSJfvW9oHq2zWMO6FuQV837Me/Ua7Cz5z9RwcT6ec53eHJMD+ebksSiHvU3j
AP9vNDE+GrQCfcTRE9IM2oj5kluL1kYf4Hds0zl1LvOgmtlrs/B5UIPNtSxb
QM4+fkvOR48xtskvUx9Pxg46ROv2+kaen8DXMz093RxfeT3E5phjsL4L4xUd
Q60WPi5BLB0/q/caRQ/hP+U9PU7OuGM/zs976Hjvv7Y1MEIIk0E/Gkd1RnW9
OHEffNDYJWy61yjVMXNi8OS2YN+9v55yE/rVOLJT3m9Mc1k9Rr029x78L9Q3
0euDz4PfndoLzg2fO2ve0N9HUCeLj8fX3mJf+u0Tr9I5CGkm4mHKQ8Leaj6p
DZ2j+0HXuoVhPKE/DvU/C9E43OPJe8N3wzWDHwNdjG+DeQLjjzgrPkCeozaR
nFv5fg5HHZDrbsXA0BfEYMnHQYtwLnwufmf8zMzMzFlrXFqL/Gt8WviD2aiD
x5fiPlv8V+QhMW7wWaGhtD8b8SrFr0DjjbkL8xRi4MSA2ZfvjQ2fEhvvTWyY
NUw1r9J7R8+EMPl0jfe2WBVxFsWqfH8ew9Yw16rnoG0bPhP0BXaLvEJf83IQ
u9M2d5Uvx/3S6DbmlvTS4J7BeWCnOSfuSegd8hm9fgW/FXmT5EvrnsWclfm0
eomp3grQbegXNBS+K/IByHHG7nJfQCuxsY9ym/QZYnMnA+Iv3nOh7gHoOWPE
bbm/s8bA6tWrm3o/5grkm5DzzlyA5zZs2NA8RzxG9+q2eFXbe/RLW/8efn73
3XeNvkK3TE1NNeMFHw8+SdUigM4NmBMRK8bnwsb4Yxyq3sBfg4+FWDaxKnQQ
PlReg77yPpw+H8DPRH0k619hg4iPketGLjQ1nByPeBvxM72mXrdhkBh5CGE8
qOuiBLYJOyaNoz7HsmVuQ7Ez2DFsHvuQ64ffnfs4Pmf0DPFxnmNOxd+bN29u
fD/og2GtvV3n7nYdlzg/+o1aD+aAnNOWLVvmaA59RoEdJx+Az8M8nbic8q3R
aZrDYkuZM5LnzD2LvG30EP54fmeuSn0rPXRU45p55WSBLlFfFjb8g3V/nLom
ivHG2OL6QfdwTTE2+B1/H74O1k/gb2KzXbFNr9dabAxUPWN4v/ra5Fw4Jwfd
oNyW+Xpa9tsTyn2ddd3YQtEx6rUw9HfGXwiTR1dfCPwXzBu9FynaZc+ePc3z
dQ8z3euxx/wkP4ZNNhp7zd/4SNBEqu+s138adN7pc0/vN9M2l8W2YqN1Hpwb
Nrkth1NwfuyHXVf/HdWxKF9Rc1OOyX7cG/jJ3/7Z+X5kr70/UXqsTgboZa9Z
JtZUaxz99PpEv97aegl0Xc/+uGsA5cwNel1xPF7PdetriHfBNcz1zjhp691T
1092+ZmkkXxf3t/Xr9XxeC/3B3Uhvab4tTZfEyMaJ4TJwzWOj3HuxfSQ8ZoH
NI7WIVA90GLzAVzfDDKfkp3SPUK6w9fr6ee4vs98PWv03XFsNBNart/vw/3m
sbGTAT5KnxuQg1avVwX9+O/a8rX8Xl/PE7wmut/rys/L19XqOlfvPeFjzx/X
de7jw/v31PtqP1+D1HMA9Xi93rrOv+731aYj3eeV2vEQJhO3Z20aR/NRYlXE
n5Rz7DnC9bHq48tPofdxe+K/a79BNY7b/C6N4+fon1n3hHruWf9df2bgb/QN
8926f6p+d7vt33dbf6Ew3jz//PNz+uLhx6nzcfRzIde6r7Pp1BpnWPfoLu1V
+4v8/dvGvTSLj8k2fVcfs/7s9Xjz4+nvuld623hu+5y9xnsIYbzpNabJFUHj
aD5KDz/ya1Q7rtcv9n0G2W8hrztctqvrOAvx+XQ9Hrs6OfC/JGeYnPaunONB
jjkJ18mgY3shz437dxNCGD79aBxqhO6///45GieEMJfDoXFCCCH0T78ah5qi
aJwQuonGCSGE0SAaJ4ThEo0TQgijQTROCMMlGieEEEaDaJwQhks0TgghjAbR
OCEMl2icEEIYDaJxQhgu0TghhDAaROOEMFyicUIIYTSIxglhuETjhBDCaBCN
E8Jw6dI477777tE+tRBCWFKMQ5/j9GgP40Sbxjn//PPL+++/f8TPo9faIiGE
sJRB40xNTc2uLXjCCSeUBx54oHn8SKE1xNvW/fQ1fKKDwiiBxmGtcV+T84MP
Pjii5/Dnn3+WgwcPRueEEJYsvfTB3r17y5NPPtnYZ2mchx9+uBw6dOiInR/2
GY3DJl3jaxnP9xlCOBo899xz5eyzz57VOPyOT/TTTz8tO3fubPQOfp2PPvqo
dfvwww9n93nvvfeaOBf5PGw7duwob731VvPz7bffbrbt27c3f3/xxRdl//79
zXhgnKJx6jW7QwhhqYD9Y2vTCHv27CmrV69u/OyKVd19991l9+7d5e+//y77
9u2bs+HfGcbGsX777bdG10i//PPPP//x54QwiqC/8X+ecsopsxrnxBNPLMuW
LSs333xzuf7668sNN9xQbrzxxnLdddeVq6++ulxzzTXNz6uuuqpceeWV5Yor
riiXX355ufTSS8vFF19cLrroosafeuGFFzYxMHxEbPr9vPPOa/a99957G33E
+PS5QOYAIYSliOygbwKNs2bNmtlY1bHHHlsuueSScueddza5xytWrCj33HNP
s/nv/pgeX758+YK3Rx99tLzxxhvlm2++aWw1oG343TUO59qlz0I4WuA7eeaZ
Z8rpp58+q3HkBz3++ONnx9Jxxx035/lhbGghfEj4YEMIIfwf9MK///47R0P8
9NNPZcOGDc3ccti2uNd28sknl4ceeqh89tlnTU4BoGM4P81LOU98O2zJNwij
xIEDB8rrr79ebrnllnLaaacdljFyzDHHNJv/jYa69tpry7p168oPP/wwez7x
44QQljroBGkGga3etm1bue2228pZZ511xDTOOeec0+QBffXVV42u8XME5SGz
+fMhjAJcn99++23ZunVrufXWW5s4EvrjpJNOKmeccUazoeOJZZ177rnN84wv
38jfYRzwHHXnxIuJS11wwQWNr4Y41mWXXdbEsfCt8vtNN93U+EDJ9/G5geLR
IYSwVMEWohmwjcp7QT8QLyKfkXzJVatWNfk5bdvjjz8+tI15KHba67dkq8F9
TpmfhlFCPhOu0e+//768+eabTezoqaeeauJXa9euba7vZ599ttnwk27cuLGs
X7++edw3Hpuenm5qtGZmZsoLL7xQNm/eXLZs2VJefPHFRkOxvfzyy+XVV19t
xumuXbvKL7/80pwLY4Q5i/yfIYSw1HA/Nrbwr7/+ajb3j+hx+XgOt+8be0zu
De+r+0Wtafz9o3PCqKAcMeC65DrWeNL1rOd6Xbe9nlcOfpduUVyX91U9Yggh
LDXkG5Htdb/2qOgGbDm+Je4VbbpG5xw7HkaBUch9qfXN0T6fEEI4GtQap37O
7aPn67T13/O6rPq5fjeHc5NPR+clH7znH8eOh1FCsd8//vhjNjfG0bhrq2us
x0E9NurnPCalXHz334yC7gohhKNBbTv1u/tzZEex1cwP3Xa22Wi9VlvbPr22
Npteay3VkSuOFT9OGBU0Lhgr9HlC53jsV7EmXcO1RplPs9d9vrt64LhvNuMj
hLCUcVvotlN05fku1mfTtqkXjvtuXO94XxxpL68HC+FoIQ2usYI/Ba3jvZ3c
f6prWfv3ii3V44TXqD6g7TX1cUMIYanSaz54pHGN0xXDEso9SA15GAWkcbxW
u15zbb64cBf1WFioxklOTgghjBYL1VrzaaAQjjRt1+LhuD4Xct1nXIQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEsDgG6Yc/39q4i6XXWrpdzy/keIN8zmGuF9B1rF5r8S3kmIfjvFgP
h43H+Xnw4MFmYy3l33//vVlXmfWiFsOhQ4ea4/W7biD7sx7nr7/+2mycy/79
+8vPP//cnFuvNaz8c7Kuz4EDB5rXsu3bt685Bhu/83kX2jO/n2tlMdcVr+F7
59z4v/Q6fn2OvfbpeiyEEMYNt8ta383vC1oft23NN/bTmong++l4XWvFtT2m
9Xd9H9a2Y9P+7ONrNfo5zLfOHcfW8fy85/t+9Ln0Xn4f7vp+6vUt+V1/a/3u
+lg6v/o+r8+px7s+a6/vuz7frv8J/3++X8H57Ny5s3z++eeNhvjkk0/Kxo0b
y6ZNm8r09HR54oknymOPPVbeeeed1nXBtd6xr3tc/5/RIi+99FJZv359+fLL
L2ef03fW9Zl5jnPasWNHeeSRR8qDDz5YVq1aVVasWFHuuOOOMjU1VXbv3j3n
9b6uuV/nP/74Y5mZmSkrV64s9913X1m+fHm56667yu233978fOWVVxoNpvet
z0XH0zWLZqvXQW/TM7zG11fv+qxt/y+Ov2vXrrJt27by8ccfN1rM9/f1r/1/
Up8//3N0or53fvI3+ik6J4QwjvwPCDZ8Qg==
    "], {{0, 509}, {569, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{274., Automatic},
  ImageSizeRaw->{569, 509},
  PlotRange->{{0, 569}, {0, 509}}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{"Figure", " ", "1"}], ":", " ", 
   RowBox[{"a", " ", 
    RowBox[{"HMM", ".", "  ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Image", " ", "adapted", " ", "from", " ", 
        RowBox[{"http", ":"}]}], "//", 
       RowBox[{
        RowBox[{"www", ".", "biopred", ".", "net"}], "/", 
        RowBox[{"eddy", ".", "html", "."}]}]}], ")"}]}]}]}],
  FontFamily->"Arial",
  FontSize->15], "\n"}], "Text",
 CellChangeTimes->{{3.59183448348744*^9, 3.59183452809344*^9}, 
   3.5918348898014402`*^9, 3.5918423987394404`*^9, {3.59184261303944*^9, 
   3.59184264799944*^9}},
 TextAlignment->Center],

Cell["\<\
We want to find the most likely sequence of states, e.g., HHHHHHMMMMHH.\
\>", "Text",
 CellChangeTimes->{{3.59183324943544*^9, 3.5918333304324403`*^9}, {
  3.5918335774514403`*^9, 3.5918335788214407`*^9}, {3.5918345055964403`*^9, 
  3.5918345317474403`*^9}}],

Cell[CellGroupData[{

Cell["Coding", "Section",
 CellChangeTimes->{{3.5855110461522093`*^9, 3.58551104688463*^9}}],

Cell["\<\
In this assignment, you will implement the Viterbi algorithm.  This algorithm \
first constructs a programming table (called the Viterbi matrix) with one row \
for each state and one column for each observation in the input (or the \
transpose of that if you prefer). The traceback algorithm starts at the last \
column, corresponding to the last base of the input observations, and traces \
back through the columns, identifying the states of the most likely sequence \
of states as it goes. 

In part 1 of this assignment compute the most likely state sequence from a \
provided HMM and a merged human and malaria sequence. In part 2, you will \
create your own HMM to try to improve the accuracy of model.\
\>", "Text",
 CellChangeTimes->{{3.5918339405074406`*^9, 3.5918339417324405`*^9}, {
  3.59184240845944*^9, 3.59184241967144*^9}, {3.59184276617144*^9, 
  3.5918427664764404`*^9}, {3.5918429609154406`*^9, 3.59184306186744*^9}, {
  3.5918829207053843`*^9, 3.5918829483599443`*^9}, {3.6532314797517653`*^9, 
  3.6532317382782373`*^9}}],

Cell[CellGroupData[{

Cell["Part 1", "Subsection",
 CellChangeTimes->{{3.58558939219401*^9, 3.5855893941449203`*^9}, {
  3.589539492078855*^9, 3.5895394993139343`*^9}, {3.5918410657394404`*^9, 
  3.59184107087444*^9}},
 FontColor->Automatic],

Cell[CellGroupData[{

Cell["Input, output, and data structures", "Subsubsection",
 CellChangeTimes->{{3.58558939219401*^9, 3.5855893941449203`*^9}, {
  3.589539492078855*^9, 3.5895394993139343`*^9}},
 FontColor->Automatic],

Cell[TextData[{
 "Read in the merged human and malaria sequence ",
 StyleBox["mixed2.fa",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 " with the provided function ",
 StyleBox["readFasta",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 ".   ",
 StyleBox["readFasta",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 " reads a fasta sequence file and outputs the nucleotide sequence converted \
to {1, 2, 3, 4}."
}], "ItemNumbered",
 CellChangeTimes->{{3.5918339715474405`*^9, 3.5918339772254405`*^9}, {
   3.5918340282764406`*^9, 3.59183411556544*^9}, {3.5918350025244403`*^9, 
   3.5918350327954407`*^9}, {3.5918355060114403`*^9, 3.59183551739544*^9}, {
   3.5918364806514406`*^9, 3.5918366501874404`*^9}, {3.5918367225804405`*^9, 
   3.5918367405234404`*^9}, {3.59183678043544*^9, 3.5918367822194405`*^9}, 
   3.5918424239674406`*^9, {3.653157908828437*^9, 3.653157944167869*^9}, {
   3.653157982947332*^9, 3.6531579876598186`*^9}}],

Cell[TextData[{
 "A call to ",
 StyleBox["readFasta",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " looks like this:"
}], "Text",
 CellChangeTimes->{{3.5918355331864405`*^9, 3.5918355674674406`*^9}, {
  3.5918367604034405`*^9, 3.59183678886744*^9}, {3.5918413955474405`*^9, 
  3.59184139609144*^9}, {3.591883161619809*^9, 3.5918831665519247`*^9}, {
  3.653231850234943*^9, 3.653231855832864*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"observations", " ", "=", " ", 
  RowBox[{"readFasta", "[", "\"\<example.fa\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.5918369098184404`*^9, 3.5918369265814404`*^9}, {
  3.59183702316444*^9, 3.5918370250764403`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "3", ",", "1", ",", "4", ",", "4", ",", "4", ",", "3", 
   ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{3.6531606933829327`*^9, 3.6531608059049273`*^9, 
  3.653231874976753*^9, 3.685648023878173*^9, 3.6856652356577168`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Read in the HMM with the provided function ",
 StyleBox["readHMM",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 ". ",
 StyleBox["readHMM",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 " takes a text file representing an HMM and outputs data structures \
containing the state names, the alphabet, the transition matrix, and emission \
matrix of the HMM."
}], "ItemNumbered",
 CellChangeTimes->{{3.5918339715474405`*^9, 3.5918339772254405`*^9}, {
   3.5918340282764406`*^9, 3.59183411556544*^9}, {3.5918350025244403`*^9, 
   3.5918350327954407`*^9}, {3.5918355060114403`*^9, 3.59183551739544*^9}, 
   3.5918364806514406`*^9, {3.5918832760080214`*^9, 3.591883287632251*^9}, {
   3.591883342472457*^9, 3.591883344680726*^9}, {3.653158080516947*^9, 
   3.653158085636196*^9}, {3.6531581327629147`*^9, 3.653158139705284*^9}}],

Cell[TextData[StyleBox["A .hmm file has the following format:", "Subitem"]], \
"Subitem",
 CellChangeTimes->{{3.5918339715474405`*^9, 3.5918339772254405`*^9}, {
   3.5918340282764406`*^9, 3.5918341314584403`*^9}, {3.5918358036044407`*^9, 
   3.5918358791634407`*^9}, {3.59183604813144*^9, 3.5918360552434406`*^9}, 
   3.5918366829784403`*^9, {3.5919605147654133`*^9, 3.5919605161313763`*^9}}]
}, Open  ]],

Cell[TextData[StyleBox["<number of states>\n<alphabet symbol 1><alphabet \
symbol 2>...<alphabet symbol M>\n<state symbol 1> <state symbol 2> ... <state \
symbol N>\n<state 1 initial probability> <state 2 initial probability> ... \
<state N initial probability>\n<emission probability of alphabet symbol 1 for \
state 1> ... <emission probability of alphabet symbol M for state 1>\n...\n\
<emission probability of alphabet symbol 1 for state N> ... <emission \
probability of alphabet symbol M for state N>\n<transition probability from \
state 1 to state 1> ... <transition probability from state 1 to state N>\n...\
\n<transition probability from state N to state 1> ... <transition \
probability from state N to state N>",
 FontFamily->"Consolas"]], "Text",
 CellChangeTimes->{{3.5918341546184406`*^9, 3.5918343191304407`*^9}, {
   3.5918343517864404`*^9, 3.5918344634184403`*^9}, 3.5918424441274405`*^9, 
   3.59188323398413*^9, {3.65315821957705*^9, 3.6531582297218103`*^9}},
 Background->RGBColor[
  0.9058823529411765, 0.9058823529411765, 0.9058823529411765]],

Cell["The HMM file for figure 1 would be:", "Subitem",
 CellChangeTimes->{{3.5918344737784405`*^9, 3.5918344741224403`*^9}, {
  3.5918345581224403`*^9, 3.5918346028024406`*^9}, {3.5918349008504405`*^9, 
  3.59183493531544*^9}, {3.5918350352274404`*^9, 3.5918350387394404`*^9}, {
  3.59183560468344*^9, 3.5918356138424406`*^9}, {3.5918377438184404`*^9, 
  3.5918377450104403`*^9}, {3.5919585385569363`*^9, 3.591958566381553*^9}}],

Cell[TextData[StyleBox["2\nACGT\nm h\n0.5 0.5\n0.4 0.1 0.1 0.4\n0.05 0.4 0.5 \
0.05\n0.99 0.01\n0.01 0.99",
 FontFamily->"Consolas"]], "Text",
 CellChangeTimes->{{3.5919585555769343`*^9, 3.591958561146862*^9}},
 Background->RGBColor[
  0.9058823529411765, 0.9058823529411765, 0.9058823529411765]],

Cell[TextData[{
 "A call to ",
 StyleBox["readHMM",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " looks like this:"
}], "Text",
 CellChangeTimes->{{3.5918355331864405`*^9, 3.5918355674674406`*^9}, 
   3.5918414020034404`*^9, {3.653158324788163*^9, 3.653158325345848*^9}, {
   3.653158404932385*^9, 3.653158410329424*^9}, {3.653231942530019*^9, 
   3.653231956266285*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "states", ",", "alphabet", ",", "emissionMatrix", ",", "transitionMatrix", 
    ",", " ", "initialStateProbs"}], "}"}], " ", "=", " ", 
  RowBox[{"readHMM", "[", "\"\<figure1.hmm\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.5918351644674406`*^9, 3.5918351778204403`*^9}, {
   3.5918352105644407`*^9, 3.5918352341324406`*^9}, 3.5918353137724404`*^9, {
   3.59183537120444*^9, 3.5918353731254406`*^9}, 3.5918354130224404`*^9, {
   3.59183598534144*^9, 3.5918359885964403`*^9}, {3.5918360425004406`*^9, 
   3.5918360434764404`*^9}, {3.5918384510684404`*^9, 3.59183845434844*^9}, 
   3.653231175716886*^9, {3.6532322816597757`*^9, 3.653232286142186*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"m\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"A\"\>", ",", "\<\"C\"\>", ",", "\<\"G\"\>", 
     ",", "\<\"T\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.4`", ",", "0.1`", ",", "0.1`", ",", "0.4`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.05`", ",", "0.4`", ",", "0.5`", ",", "0.05`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.99`", ",", "0.01`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.01`", ",", "0.99`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.5`", ",", "0.5`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.5918387568984404`*^9, 3.5918388209384403`*^9, 
  3.65323217465351*^9, 3.65323229323206*^9, 3.685648031866095*^9, 
  3.685665242920663*^9}]
}, Open  ]],

Cell["\<\
(Note that you can set a list of variables to the corresponding values within \
a list, as in {x, y}={2, 7}.) \
\>", "Text",
 CellChangeTimes->{{3.6532319649795427`*^9, 3.6532320243051157`*^9}, {
  3.653232397533489*^9, 3.6532323998483343`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"emissionMatrix", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.5918354307324405`*^9, 3.5918354358454404`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.4`", "0.1`", "0.1`", "0.4`"},
     {"0.05`", "0.4`", "0.5`", "0.05`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.5918354362314405`*^9, 3.653232409417815*^9, 
  3.685648034193902*^9, 3.685662214797695*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"transitionMatrix", "//", "MatrixForm"}]], "Input",
 CellChangeTimes->{{3.5918354426044407`*^9, 3.59183544459844*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.99`", "0.01`"},
     {"0.01`", "0.99`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.5918354449654408`*^9, 3.653232416464939*^9, 
  3.685648036318015*^9, 3.6856622171254663`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"stateSeq", "=", 
  StyleBox[
   RowBox[{"decode", "[", 
    RowBox[{
     RowBox[{"readFasta", "[", "\"\<example.fa\>\"", "]"}], ",", " ", 
     RowBox[{"readHMM", "[", "\"\<figure1.hmm\>\"", "]"}]}], "]"}],
   FontFamily->"Courier",
   FontSize->14,
   FontWeight->"Bold"]}]], "Input",
 CellChangeTimes->{{3.6856480569103727`*^9, 3.6856480569115543`*^9}, {
  3.685665880749317*^9, 3.6856658856684093`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
   ",", "\<\"m\"\>"}], "}"}]], "Output",
 CellChangeTimes->{
  3.685648058392044*^9, 3.685648433353406*^9, {3.685662191773045*^9, 
   3.685662221453474*^9}, 3.6856652501109324`*^9, 3.685665886055917*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"decode", "[", 
   RowBox[{
    RowBox[{"readFasta", "[", "\"\<mixed2.fa\>\"", "]"}], ",", " ", 
    RowBox[{"readHMM", "[", "\"\<figure1.hmm\>\"", "]"}]}], "]"}],
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"]], "Input",
 CellChangeTimes->{{3.685665416854762*^9, 3.6856654205574636`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", 
           TemplateBox[{"175513"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> {{1, 1}, {1, 2}}, 
              FrameStyle -> None, RoundingRadius -> 7]& )], ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{69., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 244, 30031372242627005704, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{67., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{67., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 244, 30031372242627005704, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{50., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 244, 30031372242627005704, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{88., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{88., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[244]]], "Output",
 CellChangeTimes->{3.685665785961589*^9, 3.685667167143766*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calculateAccuracy", "[", 
  RowBox[{"Out", "[", "244", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.685665796124331*^9, 3.68566584715761*^9}, {
  3.685670621499943*^9, 3.685670636858*^9}}],

Cell[BoxData["133883"], "Output",
 CellChangeTimes->{3.685665848305575*^9, 3.685665890328166*^9, 
  3.6856706510537243`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Implement the Viterbi and traceback algorithm by writing the function ",
 StyleBox["decode",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 ". starting from the commented-out template in the file HMMDocode.m."
}], "ItemNumbered",
 CellChangeTimes->{{3.5918361405634403`*^9, 3.5918361491144404`*^9}, {
  3.5918391996924405`*^9, 3.5918392411004405`*^9}, {3.59183964991444*^9, 
  3.5918396643634405`*^9}, {3.6531585563506393`*^9, 3.653158556727045*^9}, {
  3.653232445832926*^9, 3.653232475578939*^9}, {3.653232618482956*^9, 
  3.653232626945294*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["The first input is an observation sequence in the form returned by \
",
  FontSize->14],
 StyleBox["readFasta",
  FontFamily->"Courier New",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[".",
  FontSize->14]
}], "Subitem",
 CellChangeTimes->{{3.5918339715474405`*^9, 3.5918339772254405`*^9}, {
   3.5918340282764406`*^9, 3.5918341314584403`*^9}, {3.5918358036044407`*^9, 
   3.5918358791634407`*^9}, {3.59183604813144*^9, 3.5918360552434406`*^9}, {
   3.5918366295474405`*^9, 3.59183667544744*^9}, {3.59183923424444*^9, 
   3.5918392651254406`*^9}, {3.5918427862034407`*^9, 
   3.5918427867064404`*^9}, {3.653158514476899*^9, 3.653158596423832*^9}, 
   3.6531586414942904`*^9, {3.6532326357157803`*^9, 3.6532326721729803`*^9}}],

Cell[TextData[{
 "The second input is an HMM in the form returned by ",
 StyleBox["readHMM.",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 " "
}], "Subitem",
 CellChangeTimes->{{3.5918339715474405`*^9, 3.5918339772254405`*^9}, {
   3.5918340282764406`*^9, 3.5918341314584403`*^9}, {3.5918358036044407`*^9, 
   3.5918358791634407`*^9}, {3.59183604813144*^9, 3.5918360552434406`*^9}, {
   3.5918366295474405`*^9, 3.59183667544744*^9}, {3.59183923424444*^9, 
   3.5918392651254406`*^9}, {3.5918427862034407`*^9, 
   3.5918427867064404`*^9}, {3.653158514476899*^9, 3.653158596423832*^9}, 
   3.6531586414942904`*^9, 3.6532326357157803`*^9, {3.653232685246395*^9, 
   3.653232711081046*^9}, {3.653232752106077*^9, 3.653232753804832*^9}, {
   3.65323280294551*^9, 3.6532328041485558`*^9}}],

Cell[TextData[{
 "So you could call it by ",
 StyleBox["decode[readFasta[\"example.fa\"], readHMM[\"figure1.hmm\"]]",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 StyleBox[".",
  FontSize->14]
}], "Subitem",
 CellChangeTimes->{{3.5918339715474405`*^9, 3.5918339772254405`*^9}, {
   3.5918340282764406`*^9, 3.5918341314584403`*^9}, {3.5918358036044407`*^9, 
   3.5918358791634407`*^9}, {3.59183604813144*^9, 3.5918360552434406`*^9}, {
   3.5918366295474405`*^9, 3.59183667544744*^9}, {3.59183923424444*^9, 
   3.5918392651254406`*^9}, {3.5918427862034407`*^9, 
   3.5918427867064404`*^9}, {3.653158514476899*^9, 3.653158596423832*^9}, 
   3.6531586414942904`*^9, 3.6532326357157803`*^9, {3.653232685246395*^9, 
   3.653232711081046*^9}, {3.653232752106077*^9, 3.653232753804832*^9}, {
   3.65323280294551*^9, 3.653232817530649*^9}}],

Cell[TextData[{
 StyleBox["The output is ", "Subitem"],
 "a list of state symbols, one for each input observation, representing the \
most likely sequence of states, given the observations. E.g., {h,h,m,m,m}."
}], "Subitem",
 CellChangeTimes->{{3.5918339715474405`*^9, 3.5918339772254405`*^9}, {
  3.5918340282764406`*^9, 3.5918341314584403`*^9}, {3.5918358036044407`*^9, 
  3.5918358791634407`*^9}, {3.59183604813144*^9, 3.5918360552434406`*^9}, {
  3.5918366295474405`*^9, 3.5918367169904404`*^9}, {3.653233007198924*^9, 
  3.653233028694512*^9}, {3.653233440964814*^9, 3.653233484817135*^9}}],

Cell["\<\
Note: since the observation sequence is very long, the probabilities in the \
Viterbi dynamic programming table will get very small.  Therefore, you will \
need to do some of the calculations in log space.\
\>", "Subitem",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
  3.5918395476274405`*^9, 3.5918396004304404`*^9}},
 Background->RGBColor[0.94, 0.88, 0.94]],

Cell["A few hints:", "Subitem",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
  3.5918395476274405`*^9, 3.5918396004264402`*^9}, {3.5918396391634407`*^9, 
  3.5918399091674404`*^9}}],

Cell[CellGroupData[{

Cell["\<\
If you're not sure where to start, read pages 3-6 of the HMM class notes \
(HMMnotes.pdf).  Work through a toy example like you did with the at-home \
exercise: given an HMM and short observation sequence, e.g., ACC, compute the \
Viterbi dynamic programming table.  Then, find the maximum cell in the final \
column of the table.  Trace back to the source of max in the previous column.\
\>", "Subsubitem",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
   3.5918395476274405`*^9, 3.5918396004264402`*^9}, {3.5918396391634407`*^9, 
   3.5918399141104403`*^9}, 3.5918424608714404`*^9}],

Cell[TextData[{
 "To find the most likely sequence of states, you will create the Viterbi \
dynamic programming matrix.  A convenient way to code this would be to have a \
numStates x numObservations matrix where each element contains ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Delta]", "i"], TraditionalForm]], "Item"],
 "(j).  "
}], "Subsubitem",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
  3.5918395476274405`*^9, 3.5918396004264402`*^9}, {3.5918396391634407`*^9, 
  3.5918404163444405`*^9}, {3.59184048016444*^9, 3.5918405025474405`*^9}, {
  3.5918405547074404`*^9, 3.5918407245634403`*^9}, {3.5918407697474403`*^9, 
  3.5918409336674404`*^9}, {3.5918411103714404`*^9, 3.5918411103804407`*^9}, {
  3.5918424682074404`*^9, 3.5918424776554403`*^9}, {3.5918836606035624`*^9, 
  3.591883660610964*^9}, {3.6532335322570953`*^9, 3.6532335459351797`*^9}, {
  3.653233583267849*^9, 3.653233612716782*^9}}],

Cell["\<\
You can do the traceback directly from the Viterbi matrix, without storing \
any auxilliary information. To do this, you start from the highest scoring \
state in the final column and recalcute the most likely states for the \
previous columns, referencing the stored Viterbi scores and the transition \
probabilities. In fact, you only need to store two columns of the Viterbi \
matrix at a time, but feel free to store the whole thing.\
\>", "Subsubitem",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
  3.5918395476274405`*^9, 3.5918396004264402`*^9}, {3.5918396391634407`*^9, 
  3.5918404163444405`*^9}, {3.59184048016444*^9, 3.5918405025474405`*^9}, {
  3.5918405547074404`*^9, 3.5918407245634403`*^9}, {3.5918407697474403`*^9, 
  3.5918409336674404`*^9}, {3.5918411103714404`*^9, 3.5918411103804407`*^9}, {
  3.5918424682074404`*^9, 3.5918424776554403`*^9}, {3.5918836606035624`*^9, 
  3.591883660610964*^9}, {3.6532335322570953`*^9, 3.6532335459351797`*^9}, {
  3.653233583267849*^9, 3.653233712549899*^9}, {3.653233849962696*^9, 
  3.653233892402722*^9}, {3.653234027916054*^9, 3.653234083104278*^9}}],

Cell["\<\
Some implementations store \"backpointers\" to facilitate traceback and you \
can do this if you want. I'm not sure whether it will be any easier than just \
recalculating on the traceback -- I'm guessing not.\
\>", "Subsubitem",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
  3.5918395476274405`*^9, 3.5918396004264402`*^9}, {3.5918396391634407`*^9, 
  3.5918404163444405`*^9}, {3.59184048016444*^9, 3.5918405025474405`*^9}, {
  3.5918405547074404`*^9, 3.5918407245634403`*^9}, {3.5918407697474403`*^9, 
  3.5918409336674404`*^9}, {3.5918411103714404`*^9, 3.5918411103804407`*^9}, {
  3.5918424682074404`*^9, 3.5918424776554403`*^9}, {3.5918836606035624`*^9, 
  3.591883660610964*^9}, {3.6532335322570953`*^9, 3.6532335459351797`*^9}, {
  3.653233583267849*^9, 3.653233712549899*^9}, {3.653233849962696*^9, 
  3.653233865996291*^9}}],

Cell[TextData[{
 "If you store backpointers, they will consist of the state index (e.g., 1 \
for malaria and 2 for human) that had the maximum value in ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox["max", 
    RowBox[{"j", " ", "=", " ", "1"}], "numStates"], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    SubscriptBox["a", "ij"]}], TraditionalForm]]],
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Delta]", 
    RowBox[{"t", "-", "1"}]], TraditionalForm]]],
 "(j)) for each state i for each time t from 2 to numObservations.  A \
convenient way to code this would be to have another numStates x \
numObservations matrix where each element ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["e", "ij"], " "}], TraditionalForm]]],
 "contains the state index that maximized the expression.  (You will need to \
initialize the first column (i.e., the first observation) since there is no \
preceding observation.) This uses ",
 "memory proportional to the product of the number of states and the sequence \
length for storing the traceback pointers."
}], "Subsubitem",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
   3.5918395476274405`*^9, 3.5918396004264402`*^9}, {3.5918396391634407`*^9, 
   3.5918404163444405`*^9}, {3.59184048016444*^9, 3.5918405025474405`*^9}, {
   3.5918405547074404`*^9, 3.5918407245634403`*^9}, {3.5918407697474403`*^9, 
   3.5918409336674404`*^9}, {3.5918411103714404`*^9, 
   3.5918411103804407`*^9}, {3.5918424682074404`*^9, 
   3.5918424776554403`*^9}, {3.5918836606035624`*^9, 3.591883660610964*^9}, {
   3.6532335322570953`*^9, 3.6532335459351797`*^9}, 3.653233583267849*^9, {
   3.653233719775354*^9, 3.6532337442096024`*^9}, {3.653233929881975*^9, 
   3.6532339377067327`*^9}, {3.653233977414936*^9, 3.653233998489624*^9}}]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "Evaluate the accuracy of the HMM with the provided function ",
 StyleBox["calculateAccuracy",
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"],
 ".  This function takes the state sequence you generated with ",
 StyleBox["decode",
  FontFamily->"Courier",
  FontWeight->"Bold"],
 " and returns the number of correctly labeled states (an integer).  You \
should expect some bases to be mis-attributed, particularly near the \
transitions from one state to another."
}], "ItemNumbered",
 CellChangeTimes->{{3.5918394188754406`*^9, 3.59183950546644*^9}, {
  3.5918395476274405`*^9, 3.5918396004264402`*^9}, {3.5918396391634407`*^9, 
  3.5918404163444405`*^9}, {3.59184048016444*^9, 3.5918405025474405`*^9}, {
  3.5918405547074404`*^9, 3.5918407245634403`*^9}, {3.5918407697474403`*^9, 
  3.5918409336674404`*^9}, {3.5918411103714404`*^9, 3.59184114132244*^9}, {
  3.5918411719464407`*^9, 3.5918413147394404`*^9}, {3.5918413671864405`*^9, 
  3.5918413716114407`*^9}, {3.5918424816394405`*^9, 3.5918424892474403`*^9}, {
  3.59184289553944*^9, 3.59184290525144*^9}, {3.653235097383222*^9, 
  3.653235128215846*^9}, {3.653235220298188*^9, 3.653235232481555*^9}}]
}, Open  ]],

Cell["\<\
How well did the HMM provided in humanmalaria.hmm do on labeling the states?  \
In the next part, we will see if we can improve the accuracy.\
\>", "Text",
 CellChangeTimes->{{3.5918415816114407`*^9, 3.59184163584344*^9}, {
  3.6532352568536882`*^9, 3.653235302759778*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Part 2", "Subsection",
 CellChangeTimes->{{3.58558939219401*^9, 3.5855893941449203`*^9}, {
  3.589539112993775*^9, 3.589539119281577*^9}, {3.59184109309144*^9, 
  3.59184109594744*^9}},
 FontColor->Automatic],

Cell["\<\
Copy the file humanmalaria.hmm to my.hmm and play around with the parameters. \
 Can you improve accuracy of the model?  Please turn in your most accurate \
my.hmm file with the assignment.\
\>", "Text",
 CellChangeTimes->{{3.5918418071394405`*^9, 3.5918419052854404`*^9}, {
  3.59184210683444*^9, 3.59184210994744*^9}, {3.5918424967984405`*^9, 
  3.5918425110514402`*^9}, {3.653235329564334*^9, 3.653235384543735*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"readHMM", "[", "\"\<humanmalaria.hmm\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.685799766232539*^9, 3.685799772518879*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"m\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"A\"\>", ",", "\<\"C\"\>", ",", "\<\"G\"\>", 
     ",", "\<\"T\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.3`", ",", "0.2`", ",", "0.2`", ",", "0.3`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.25`", ",", "0.25`", ",", "0.25`", ",", "0.25`"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.5`", ",", "0.5`"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.5`", ",", "0.5`"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.5`", ",", "0.5`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.685799773431287*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"decode", "[", 
   RowBox[{
    RowBox[{"readFasta", "[", "\"\<mixed2.fa\>\"", "]"}], ",", " ", 
    RowBox[{"readHMM", "[", "\"\<humanmalaria.hmm\>\"", "]"}]}], "]"}],
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"]], "Input",
 CellChangeTimes->{{3.685799815576812*^9, 3.685799821415436*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", 
           TemplateBox[{"175513"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> {{1, 1}, {1, 2}}, 
              FrameStyle -> None, RoundingRadius -> 7]& )], ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{69., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 248, 30031372242627005704, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{67., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{67., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 248, 30031372242627005704, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{50., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{50., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 248, 30031372242627005704, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{88., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[248]]], "Output",
 CellChangeTimes->{3.685800846000517*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"calculateAccuracy", "[", 
  RowBox[{"Out", "[", "248", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.6858008785029907`*^9, 3.685800879150979*^9}}],

Cell[BoxData["118389"], "Output",
 CellChangeTimes->{3.685800879950142*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Provided files", "Subsection",
 CellChangeTimes->{{3.58558939219401*^9, 3.5855893941449203`*^9}, {
  3.589539112993775*^9, 3.589539119281577*^9}},
 FontColor->Automatic],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["humanmalaria.hmm",
  FontFamily->"Consolas",
  FontSize->13],
 " - an initial .hmm model of human and malaria merged sequences"
}], "Subitem",
 CellChangeTimes->{{3.59184099031544*^9, 3.59184100152544*^9}, 
   3.5918410530294404`*^9, {3.5918419093314404`*^9, 3.5918419167384405`*^9}, {
   3.5918419819704404`*^9, 3.59184200461944*^9}, {3.5918425074114404`*^9, 
   3.5918425083944407`*^9}}],

Cell[TextData[{
 StyleBox["mixed2.fa",
  FontFamily->"Consolas",
  FontSize->13],
 " - a fasta of merged human and malaria sequences "
}], "Subitem",
 CellChangeTimes->{{3.59184099031544*^9, 3.5918410015224404`*^9}, {
  3.59184192357944*^9, 3.5918419334584403`*^9}, {3.5918420115144405`*^9, 
  3.5918420125304403`*^9}}],

Cell[TextData[{
 StyleBox["mixed2key.fa",
  FontFamily->"Consolas",
  FontSize->13],
 " - a file containing the true state labels."
}], "Subitem",
 CellChangeTimes->{{3.59184099031544*^9, 3.59184100013144*^9}, {
  3.5918419519394407`*^9, 3.5918419746754403`*^9}, {3.653235398145835*^9, 
  3.653235398149085*^9}}],

Cell["\<\
example.fa -- a fasta file containing a very short DNA sequence, for testing.\
\>", "Subitem",
 CellChangeTimes->{{3.59184099031544*^9, 3.59184100013144*^9}, {
  3.5918419519394407`*^9, 3.5918419746754403`*^9}, {3.653235398145835*^9, 
  3.653235447012967*^9}}],

Cell["\<\
figure1.hmm -- a file containing the hmm shown in Figure 1 above, for testing.\
\>", "Subitem",
 CellChangeTimes->{{3.59184099031544*^9, 3.59184100013144*^9}, {
  3.5918419519394407`*^9, 3.5918419746754403`*^9}, {3.653235398145835*^9, 
  3.6532354699673233`*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Questions", "Section",
 CellChangeTimes->{{3.5855125680373287`*^9, 3.5855125711403923`*^9}, {
  3.5918418620184402`*^9, 3.59184186243544*^9}}],

Cell["\<\
What percentage of the states did humanmalaria.hmm label correctly?\
\>", "ItemNumbered",
 CellChangeTimes->{{3.5895700454758883`*^9, 3.589570064114008*^9}, {
  3.589577395441348*^9, 3.589577414584161*^9}, {3.59184170113144*^9, 
  3.5918417382224407`*^9}, {3.653235493538035*^9, 3.653235519020104*^9}, {
  3.685800855411384*^9, 3.6858008554119873`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"Out", "[", "249", "]"}], "/", "175578"}], "]"}]], "Input",
 CellChangeTimes->{{3.685801032999199*^9, 3.685801044598709*^9}, {
  3.6858010770335417`*^9, 3.685801081342766*^9}}],

Cell[BoxData["0.6742815159074599`"], "Output",
 CellChangeTimes->{3.685801045542934*^9, 3.685801081725754*^9}]
}, Open  ]],

Cell["\<\
As the outputs in Out[248] and Out[249], the percentage of the states did \
humanmalaria.hmm label correctly is 0.674282.\
\>", "Text",
 CellChangeTimes->{{3.685800927358046*^9, 3.6858010177262707`*^9}, {
  3.685801056438347*^9, 3.685801095038331*^9}}],

Cell["\<\
What percentage of the states did your best my.hmm label correctly?\
\>", "ItemNumbered",
 CellChangeTimes->{{3.5895700454758883`*^9, 3.589570064114008*^9}, {
  3.589577395441348*^9, 3.589577414584161*^9}, {3.59184170113144*^9, 
  3.5918417732054405`*^9}, {3.653235506098625*^9, 3.653235525089849*^9}}],

Cell["\<\
The best .hmm is {{\[OpenCurlyDoubleQuote]m\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]h\[CloseCurlyDoubleQuote]},{\[OpenCurlyDoubleQuote]A\
\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]C\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]G\[CloseCurlyDoubleQuote],\[CloseCurlyDoubleQuote]T\
\[CloseCurlyDoubleQuote]},{{0.38,0.12,0.12,0.38},{0.26,0.24,0.24,0.26}},{{0.\
99,0.01},{0.01,0.99}},{0.38,0.62}};
with this .hmm, we can get 0.946155 of correctness. \
\>", "Text",
 CellChangeTimes->{{3.685842803732327*^9, 3.685842880120324*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"modifiedHM2", " ", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<m\>\"", ",", "\"\<h\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<A\>\"", ",", "\"\<C\>\"", ",", "\"\<G\>\"", ",", "\"\<T\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.38", ",", "0.12", ",", "0.12", ",", "0.38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.293", ",", "0.2", ",", "0.207", ",", "0.3"}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.95", ",", "0.05"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.05", ",", "0.95"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.4", ",", "0.6"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{"hmDecode2", " ", "=", " ", 
    RowBox[{"decode", "[", 
     RowBox[{
      RowBox[{"readFasta", "[", "\"\<mixed2.fa\>\"", "]"}], ",", " ", 
      "modifiedHM2"}], "]"}]}], ";"}],
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"], "\[IndentingNewLine]", 
 RowBox[{"correctPer2", " ", "=", " ", 
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"calculateAccuracy", "[", "hmDecode2", "]"}], "/", "175578"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.6858017562489433`*^9, 3.685801817431233*^9}, {
  3.685802371418021*^9, 3.6858023752960243`*^9}}],

Cell[BoxData["0.8777409470434793`"], "Output",
 CellChangeTimes->{3.6858033569823093`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"modifiedHM3", " ", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<m\>\"", ",", "\"\<h\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<A\>\"", ",", "\"\<C\>\"", ",", "\"\<G\>\"", ",", "\"\<T\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.38", ",", "0.12", ",", "0.12", ",", "0.38"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.26", ",", "0.24", ",", "0.24", ",", "0.26"}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.99", ",", "0.01"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.01", ",", "0.99"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.38", ",", "0.62"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{"hmDecode3", " ", "=", " ", 
   RowBox[{"decode", "[", 
    RowBox[{
     RowBox[{"readFasta", "[", "\"\<mixed2.fa\>\"", "]"}], ",", " ", 
     "modifiedHM3"}], "]"}]}],
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"], "\[IndentingNewLine]", 
 RowBox[{"correctPer3", " ", "=", " ", 
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"calculateAccuracy", "[", "hmDecode3", "]"}], "/", "175578"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.685803435929181*^9, 3.6858035063989687`*^9}, {
  3.68580454307347*^9, 3.685804550007908*^9}, {3.685804583559978*^9, 
  3.68580459416774*^9}, {3.6858148660990543`*^9, 3.685814890685513*^9}, {
  3.6858363190455103`*^9, 3.685836446457485*^9}, {3.6858427220096407`*^9, 
  3.6858427391656437`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"h\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", 
           TemplateBox[{"175513"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> {{1, 1}, {1, 2}}, 
              FrameStyle -> None, RoundingRadius -> 7]& )], ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{69., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 294, 30031372242627005704, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{67., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 294, 30031372242627005704, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{50., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{50., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 294, 30031372242627005704, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{88., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{88., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[294]]], "Output",
 CellChangeTimes->{3.685804473207797*^9, 3.6858055903295937`*^9, 
  3.685835695169796*^9, 3.685836437565434*^9, 3.685837497448889*^9}],

Cell[BoxData["0.9461549852487213`"], "Output",
 CellChangeTimes->{3.685804473207797*^9, 3.6858055903295937`*^9, 
  3.685835695169796*^9, 3.685836437565434*^9, 3.685837497587796*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"modifiedHM4", " ", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<m\>\"", ",", "\"\<h\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<A\>\"", ",", "\"\<C\>\"", ",", "\"\<G\>\"", ",", "\"\<T\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.4", ",", "0.1", ",", "0.1", ",", "0.4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.26", ",", "0.24", ",", "0.24", ",", "0.26"}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.99", ",", "0.01"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0.01", ",", "0.99"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.4", ",", "0.6"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{"hmDecode4", " ", "=", " ", 
   RowBox[{"decode", "[", 
    RowBox[{
     RowBox[{"readFasta", "[", "\"\<mixed2.fa\>\"", "]"}], ",", " ", 
     "modifiedHM4"}], "]"}]}],
  FontFamily->"Courier",
  FontSize->14,
  FontWeight->"Bold"], "\[IndentingNewLine]", 
 RowBox[{"correctPer4", " ", "=", " ", 
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"calculateAccuracy", "[", "hmDecode4", "]"}], "/", "175578"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.685805048280241*^9, 3.68580508731245*^9}, {
  3.685805136248288*^9, 3.6858051493113537`*^9}, {3.6858078126877947`*^9, 
  3.685807821045639*^9}, {3.685809271264032*^9, 3.685809274637464*^9}, {
  3.685810317727026*^9, 3.685810372717513*^9}, {3.685810443230864*^9, 
  3.685810460149434*^9}, {3.685811793134137*^9, 3.6858118015730124`*^9}, {
  3.685811864509013*^9, 3.685811888317275*^9}, {3.685839028115539*^9, 
  3.685839055015246*^9}, {3.685840869715085*^9, 3.685840879264523*^9}, {
  3.6858427493420267`*^9, 3.685842756980495*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", 
           TemplateBox[{"175513"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> {{1, 1}, {1, 2}}, 
              FrameStyle -> None, RoundingRadius -> 7]& )], ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{69., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 306, 30031372242627005704, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{67., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 306, 30031372242627005704, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{50., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 306, 30031372242627005704, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{88., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[306]]], "Output",
 CellChangeTimes->{3.685807798588472*^9, 3.6858087889541817`*^9, 
  3.6858102482637587`*^9, 3.685810428180881*^9, 3.68581157793963*^9, 
  3.685814693828512*^9, 3.685839044717804*^9, 3.685840087144863*^9, 
  3.685841872310946*^9, 3.685844199041157*^9}],

Cell[BoxData["0.8984553873492123`"], "Output",
 CellChangeTimes->{3.685807798588472*^9, 3.6858087889541817`*^9, 
  3.6858102482637587`*^9, 3.685810428180881*^9, 3.68581157793963*^9, 
  3.685814693828512*^9, 3.685839044717804*^9, 3.685840087144863*^9, 
  3.685841872310946*^9, 3.6858441992833567`*^9}]
}, Open  ]],

Cell[BoxData["  "], "Input",
 CellChangeTimes->{{3.6858117738239098`*^9, 3.6858117749936934`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Instructions and grading", "Section",
 CellChangeTimes->{{3.585589085899582*^9, 3.585589086700222*^9}, {
   3.586022771579047*^9, 3.586022775165971*^9}, {3.589547506333993*^9, 
   3.589547525506456*^9}, 3.589578378913684*^9}],

Cell["\<\
Please export your project as a .zip file before turning it in. The .zip \
should contain: (1) your hmmDecode.m file containing the code and sufficient \
documentation to read and understand it, (2) this notebook, including your \
answers underneath each question in the Questions section, (3) your best \
my.hmm file.\
\>", "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQfUezK/fK1leOvtHrG0H0ng22bSA6I2LPahBdZPBt
PYiWeldyEESfmFZu+xVId2hpOYPotMgXsSBaMvxpKYjWmh5VDaKXpaysB9Gz
r71X/QWk1xyV0gbRDer3TwRsf+W4I+fGSRB9/obfqdNAeoHlwgsgWvOlyC0Q
PV1L7AWIFvtSFDN53yvHbwdu5ILoI9UORSB6k71fJYjeMyO1DizurDwLRMu9
lFsMoqN2N+4G0af85+8H0bZ8S8+A6HunWq6AaHUljXsgmiHj6WMQvZ6D7ymI
niE65wuI3rXqCph+aLaNdQqQTt3+jR1Ev5kgLPf00CvHbUaWaiCab61x1j/z
145CU542gGgA2k3FBw==
  "]],

Cell[TextData[{
 "The assignment will be graded as follows.\n\nA. 2 points for turning in \
code that takes input of the right form and produces output of the right \
form. \n\nB. 4 points for turning in a fully correct implementation and \
notebook questions are answered.\n\nC. 1 point for turning in a HMM .model \
file that improves the accuracy of the sequence of most likely states.\n\nD.  \
2 points for style (things such as capitalization and full, descriptive \
names) and legibility, including indentation, line breaks, and comments. Use \
of global variables, i.e. variables that are not protected by ",
 StyleBox["Module",
  FontFamily->"Courier"],
 ", ",
 StyleBox["Block",
  FontFamily->"Courier"],
 ", or ",
 StyleBox["With",
  FontFamily->"Courier"],
 " is considered very bad style."
}], "Text",
 CellChangeTimes->{{3.58499210831761*^9, 3.584992269479895*^9}, {
   3.584992305927824*^9, 3.584992605885792*^9}, {3.5849926396934137`*^9, 
   3.584992779654065*^9}, {3.585059307737156*^9, 3.585059353317692*^9}, {
   3.585059567260913*^9, 3.585059759166882*^9}, {3.5850598028309526`*^9, 
   3.585059837293536*^9}, {3.585069359494947*^9, 3.58506940083663*^9}, {
   3.585771078973572*^9, 3.5857710867632713`*^9}, {3.586022994463966*^9, 
   3.5860230450382843`*^9}, {3.586023120653462*^9, 3.586023232692699*^9}, {
   3.5895774435922956`*^9, 3.589577582773555*^9}, {3.589577618015108*^9, 
   3.5895776744452753`*^9}, {3.5895777151748943`*^9, 3.589577937102022*^9}, {
   3.5895780089659567`*^9, 3.58957820405412*^9}, {3.58957823697849*^9, 
   3.589578341157988*^9}, {3.589578404149764*^9, 3.589578481254169*^9}, {
   3.5895785271689453`*^9, 3.589578571097124*^9}, {3.589578667855715*^9, 
   3.5895786731804323`*^9}, {3.5895789279528713`*^9, 
   3.5895789882860403`*^9}, {3.589579072283917*^9, 3.589579072920403*^9}, {
   3.589580370953549*^9, 3.589580407358026*^9}, {3.589580450058196*^9, 
   3.589580452958104*^9}, {3.589910256425527*^9, 3.58991026378305*^9}, {
   3.5899110163617163`*^9, 3.5899110196495037`*^9}, {3.5918421262674403`*^9, 
   3.5918421459714403`*^9}, {3.5918421867074404`*^9, 
   3.5918422941874404`*^9}, {3.5919606165782075`*^9, 3.5919606169434605`*^9}, 
   3.653235749516161*^9, {3.6532357849554787`*^9, 3.653235794165176*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"keyStateSequence", "=", 
  RowBox[{"Flatten", "[", 
   RowBox[{"Characters", "[", 
    RowBox[{"ToLowerCase", "[", 
     RowBox[{"Import", "[", "\"\<mixed2key.fa\>\"", "]"}], "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.685665971160171*^9, 3.685665971163395*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", "\<\"h\"\>", ",", "\<\"h\"\>", 
           ",", "\<\"h\"\>", ",", 
           TemplateBox[{"175513"},
            "OutputSizeLimit`Skeleton",
            DisplayFunction->(FrameBox[
              RowBox[{"\" \[CenterEllipsis]\"", #, "\"\[CenterEllipsis] \""}],
               Background -> GrayLevel[0.75], 
              BaseStyle -> {
               "Deploy", FontColor -> GrayLevel[1], FontSize -> Smaller, 
                ShowStringCharacters -> False}, BaselinePosition -> Baseline, 
              ContentPadding -> False, FrameMargins -> {{1, 1}, {1, 2}}, 
              FrameStyle -> None, RoundingRadius -> 7]& )], ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>", 
           ",", "\<\"m\"\>", ",", "\<\"m\"\>", ",", "\<\"m\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{69., {3., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarCategory",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{60., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 242, 30031372242627005704, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{67., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 242, 30031372242627005704, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{50., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 242, 30031372242627005704, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{88., {1., 9.}}],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "SuggestionsBarControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Evaluation"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    Background->RGBColor[0.9657, 0.9753, 0.9802],
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Out[242]]], "Output",
 CellChangeTimes->{3.685665972507029*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{977, 1108},
WindowMargins->{{Automatic, 90}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
ShowSelection->True,
Magnification->1.25,
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 28, \
2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 353, 5, 114, "Title"],
Cell[935, 29, 1456, 22, 180, "Text"],
Cell[CellGroupData[{
Cell[2416, 55, 109, 1, 37, "Item"],
Cell[2528, 58, 135, 2, 32, "Subitem"],
Cell[2666, 62, 338, 6, 57, "Item"],
Cell[3007, 70, 145, 2, 32, "Subitem"]
}, Open  ]],
Cell[3167, 75, 92550, 1529, 400, "Text"],
Cell[95720, 1606, 268, 5, 37, "Text"],
Cell[CellGroupData[{
Cell[96013, 1615, 92, 1, 80, "Section"],
Cell[96108, 1618, 1052, 17, 227, "Text"],
Cell[CellGroupData[{
Cell[97185, 1639, 219, 4, 54, "Subsection"],
Cell[CellGroupData[{
Cell[97429, 1647, 200, 3, 43, "Subsubsection"],
Cell[97632, 1652, 989, 25, 83, "ItemNumbered"],
Cell[98624, 1679, 401, 10, 38, "Text"],
Cell[CellGroupData[{
Cell[99050, 1693, 243, 4, 39, "Input"],
Cell[99296, 1699, 289, 6, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[99622, 1710, 877, 20, 82, "ItemNumbered"],
Cell[100502, 1732, 392, 5, 32, "Subitem"]
}, Open  ]],
Cell[100909, 1740, 1066, 15, 360, "Text"],
Cell[101978, 1757, 428, 5, 32, "Subitem"],
Cell[102409, 1764, 296, 5, 208, "Text"],
Cell[102708, 1771, 376, 10, 38, "Text"],
Cell[CellGroupData[{
Cell[103109, 1785, 707, 12, 66, "Input"],
Cell[103819, 1799, 887, 25, 66, "Output"]
}, Open  ]],
Cell[104721, 1827, 255, 5, 37, "Text"],
Cell[CellGroupData[{
Cell[105001, 1836, 142, 2, 39, "Input"],
Cell[105146, 1840, 744, 19, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[105927, 1864, 141, 2, 39, "Input"],
Cell[106071, 1868, 716, 19, 72, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[106824, 1892, 431, 11, 39, "Input"],
Cell[107258, 1905, 386, 7, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107681, 1917, 340, 9, 37, "Input"],
Cell[108024, 1928, 9127, 222, 173, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117188, 2155, 213, 4, 39, "Input"],
Cell[117404, 2161, 124, 2, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117565, 2168, 568, 11, 60, "ItemNumbered"],
Cell[CellGroupData[{
Cell[118158, 2183, 757, 17, 32, "Subitem"],
Cell[118918, 2202, 803, 16, 32, "Subitem"],
Cell[119724, 2220, 851, 17, 32, "Subitem"],
Cell[120578, 2239, 595, 9, 52, "Subitem"],
Cell[121176, 2250, 393, 7, 93, "Subitem"],
Cell[121572, 2259, 204, 3, 32, "Subitem"],
Cell[CellGroupData[{
Cell[121801, 2266, 616, 9, 90, "Subsubitem"],
Cell[122420, 2277, 932, 16, 73, "Subsubitem"],
Cell[123355, 2295, 1141, 16, 110, "Subsubitem"],
Cell[124499, 2313, 867, 13, 50, "Subsubitem"],
Cell[125369, 2328, 1807, 37, 162, "Subsubitem"]
}, Open  ]]
}, Open  ]],
Cell[127203, 2369, 1186, 22, 105, "ItemNumbered"]
}, Open  ]],
Cell[128404, 2394, 283, 5, 61, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[128736, 2405, 214, 4, 54, "Subsection"],
Cell[128953, 2411, 429, 7, 61, "Text"],
Cell[CellGroupData[{
Cell[129407, 2422, 149, 2, 39, "Input"],
Cell[129559, 2426, 767, 23, 66, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[130363, 2454, 343, 9, 37, "Input"],
Cell[130709, 2465, 9105, 222, 173, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[139851, 2692, 170, 3, 39, "Input"],
Cell[140024, 2697, 75, 1, 39, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[140148, 2704, 175, 3, 54, "Subsection"],
Cell[CellGroupData[{
Cell[140348, 2711, 416, 9, 32, "Subitem"],
Cell[140767, 2722, 319, 8, 32, "Subitem"],
Cell[141089, 2732, 312, 8, 32, "Subitem"],
Cell[141404, 2742, 270, 5, 32, "Subitem"],
Cell[141677, 2749, 273, 5, 32, "Subitem"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[142011, 2761, 148, 2, 80, "Section"],
Cell[142162, 2765, 363, 6, 36, "ItemNumbered"],
Cell[CellGroupData[{
Cell[142550, 2775, 232, 5, 39, "Input"],
Cell[142785, 2782, 110, 1, 39, "Output"]
}, Open  ]],
Cell[142910, 2786, 262, 5, 61, "Text"],
Cell[143175, 2793, 312, 5, 36, "ItemNumbered"],
Cell[143490, 2800, 558, 9, 85, "Text"],
Cell[CellGroupData[{
Cell[144073, 2813, 1434, 43, 144, "Input"],
Cell[145510, 2858, 90, 1, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[145637, 2864, 1610, 45, 144, "Input"],
Cell[147250, 2911, 9198, 223, 207, "Output"],
Cell[156451, 3136, 181, 2, 39, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[156669, 3143, 1842, 48, 144, "Input"],
Cell[158514, 3193, 9171, 222, 173, "Output"],
Cell[167688, 3417, 300, 4, 39, "Output"]
}, Open  ]],
Cell[168003, 3424, 98, 1, 39, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168138, 3430, 231, 3, 80, "Section"],
Cell[168372, 3435, 772, 15, 85, "Text"],
Cell[169147, 3452, 2256, 38, 276, "Text"],
Cell[CellGroupData[{
Cell[171428, 3494, 301, 7, 39, "Input"],
Cell[171732, 3503, 9009, 220, 173, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

